^10     SWMapster32 Help
^11 1. ^13ST1 HITAG -> NAME LIST ^7SWBHELP.HLP (part 1)
^11 2. ^13ST1 INFO: TAGS ^10(0 - 59) ^7SWBHELP.HLP (part 2)
^11 3. ^13ST1 INFO: TAGS ^10(62 - 100) ^7SWBHELP.HLP (part 3)
^11 4. ^13ST1 INFO: TAGS ^10(101 - 135) ^7SWBHELP.HLP (part 4)
^11 5. ^13ST1 INFO: TAGS ^10(136 - 1006) ^7SWBHELP.HLP (part 5)
^11 6. ^13DIGITAL SOUND FX INDEX ^7SWSOUNDS.TXT(part 1)
^11 7. ^13AMBIENT SOUNDS LIST ^7SWSOUNDS.TXT (part 2)
^11 8. ^13TRACKS AND ACTORS TAG INFO ^7SPRITAGS.TXT
^11 9. ^13WALL AND SECTOR TAGGING REFERENCE ^7WALLTAGS.TXT 
^11 0. ^13ORIGINAL 1997 BUILD EDITOR DOCUMENTATION ^7SWBUILD.TXT 




^15==================================
^15==      HELP MENU KEY LIST      ==
^15==================================
^11T     ^12goto table of contents
^11G     ^12goto arbitrary page
^11#1-0  ^12goto page 1-10
^11UP    ^12scroll up
^11DOWN  ^12scroll down
^11PGUP  ^12scroll one page up
^11PGDN  ^12scroll one page down
^11SPACE ^12goto next paragraph
^11BS    ^12goto prev paragraph
^11HOME  ^12goto beginning of page
^11END   ^12goto end of page
^11LEFT  ^12prev page
^11RIGHT ^12next page
^11ESC   ^12exit help menu
^P page 1
^3The following is a list of hitag values for ST1 sprites used to create special effects.

                0. SECT_SINK
                1. SECT_OPERATIONAL
                3. SECT_CURRENT
                5. SECT_NO_RIDE
                7. SECT_DIVE_AREA
                8. SECT_UNDERWATER
                9. SECT_UNDERWATER2
                16. SO_ANGLE
                19. SECT_FLOOR_PAN
                21. SECT_CEILING_PAN
                23. WALL_PAN_SPEED
                29. SECT_LOCK_DOOR
                30. SPRI_CLIMB_MARKER
                31. SECT_SO_SPRITE_OBJ
                32. SECT_SO_DONT_BOB
                33. SECT_SO_SINK_DEST
                34. SECT_SO_DONT_SINK
                37. SECT_SO_FORM_WHIRLPOOL
                38. SECT_ACTOR_BLOCK
                42. MULTI_PLAYER_START
                43. FIREBALL_TRAP
                44. BOLT_TRAP
                45. SECT_SO_DONT_ROTATE
                46. PARALLAX_LEVEL
                47. SECT_DONT_COPY_PALETTE
                48. MULTI_COOPERATIVE_START
                49. SO_SET_SPEED
                50. SO_SPIN
                51. SO_SPIN_REVERSE
                52. SO_BOB_START
                53. SO_BOB_SPEED
                55. SO_TURN_SPEED
                56. LAVA_ERUPT
                57. SECT_EXPLODING_CEIL_FLOOR
                58. SECT_COPY_DEST
                59. SECT_COPY_SOURCE
                62. SHOOT_POINT
                63. SPEAR_TRAP
                64. SO_SYNC1
                65. SO_SYNC2
                66. DEMO_CAMERA
                68. SO_LIMIT_TURN
                69. SPAWN_SPOT
                70. SO_MATCH_EVENT
                71. SO_SLOPE_FLOOR_TO_POINT
                72. SO_SLOPE_CEILING_TO_POINT
                73. SO_TORNADO
                75. SO_AMOEBA
                76. SO_MAX_DAMAGE
                77. SO_RAM_DAMAGE
                80. SO_KILLABLE
                81. SO_AUTO_TURRET
                82. SECT_DAMAGE
                84. WARP_TELEPORTER
                85. WARP_CEILING_PLANE
                86. WARP_FLOOR_PLANE
                87. WARP_COPY_SPRITE1
                88. WARP_COPY_SPRITE2
                90. PLAX_GLOB_Z_ADJUST
                92. SECT_VATOR
                97. CEILING_Z_ADJUST
                98. FLOOR_Z_ADJUST
                99. FLOOR_SLOPE_DONT_DRAW
                100. SO_SCALE_INFO
                101. SO_SCALE_POINT_INFO
                102. SO_SCALE_XY_MULTIPLY
                103. SECT_WALL_MOVE
                104. SECT_WALL_MOVE_CANSEE
                106. SECT_SPIKE
                108. LIGHTING
                109. LIGHTING_DIFFUSE
                110. VIEW_LEVEL1
                111. VIEW_LEVEL2
                120. VIEW_THRU_CEILING
                121. VIEW_THRU_FLOOR
                132. BREAKABLE
                132. BREAKABLE_SPRITE
                133. QUAKE_SPOT
                134. SOUND_SPOT
                135. SLIDE_SECTOR
                136. CEILING_FLOOR_PIC_OVERRIDE
                140. TRIGGER_SECTOR
                141. DELETE_SPRITE
                143. SECT_ROTATOR
                144. SECT_ROTATOR_PIVOT
                145. SECT_SLIDOR
                146. SECT_CHANGOR
                147. SO_DRIVABLE_ATTRIB
                148. WALL_DONT_STICK
                149. SPAWN_ITEMS
                150. STOP_SPOUND_SPOT
                202. BOUND_FLOOR_BASE_OFFSET
                203. BOUND_FLOOR_OFFSET
                500-596: SECT_SO_BOUNDING
                1000. MIRROR_CAM
                1002. AMBIENT_SOUND
                1005. ECHO_SPOT
                1006. DRIP_GENERATOR  

^P page 2-5
^3 # -------------------------------------------
^3 # Shadow Warrior BUILD Context Sensitive Help
^3 # Compiled And Edited By Keith Schuler
^3 # (c) 1997 3D Realms Entertainment
^3 # -------------------------------------------

^3 # This is the help file that holds the text used by Shadow Warrior BUILD
^3 # to provide assistance with ST1 hitags. Most of this content is the same
^3 # as is found in SPRITAGS.TXT

^11@tag0
^10HITAG 0:        SECT_SINK
                TAG2 = depth

        Place this in water, lava, or any sector with a floor surface you
        want Lo Wang to sink into. He will sink to the depth specified in
        TAG2. When building dive sectors (see Hitag 7: SECT_DIVE_AREA) TAG2
        needs to be at least 35. You probably never want to use a value
        greater than 40, or the player's view may become distorted. NOTE: If
        used with a lava texture, SECT_SINK will cause Lo Wang to take damage
        when stepping in the sector.
        EXAMPLES: AA and BB in EXAMPLE.MAP
        SEE ALSO: PLAX_GLOB_Z_ADJUST (hitag 90), CEILING_Z_ADJUST (hitag 97),
                  FLOOR_Z_ADJUST (hitag 98)

^11@tag1
^10HITAG 1:        SECT_OPERATIONAL

        Place this in a sector of a driveable sector object. This will be the
        sector the player must stand in and press SPACE to operate the
        driveable.
        EXAMPLES: EE and EF in EXAMPLE.MAP

^11@tag3
^10HITAG 3:        SECT_CURRENT
        TAG2 = speed
        TAG4 = ang

        If SECT_CURRENT is used in a sector along with either a SECT_SINK
        (Hitag 0), a SECT_UNDERWATER (Hitag 8), or a SECT_UNDERWATER2 (Hitag
        9), the player will be moved in the direction the SECT_CURRENT
        is facing, at the speed designated in TAG2.
        EXAMPLES: AA and BB in EXAMPLE.MAP
        SEE ALSO: SECT_SINK (hitag 0), SECT_UNDERWATER (hitag 8),
                  SECT_FLOOR_PAN (hitag 19)

^11@tag5
^10HITAG 5:        SECT_NO_RIDE

        Use SECT_NO_RIDE in any sector of a moving sector object to keep the
        player from moving with that sector.
        EXAMPLES: EC, FC and FD in EXAMPLE.MAP

^11@tag7
^10HITAG 7:        SECT_DIVE_AREA
                TAG2 = match (non zero)

        Diving area - pressing the CROUCH key when here will teleport the
        player to an UNDERWATER (Hitag 8) area with a matching UNIQUE match
        tag. You must also have a SECT_SINK (Hitag 0) sprite in the same
        sector with a TAG2 of at least 35 for this to work. 
        EXAMPLES: BA in EXAMPLE.MAP
        SEE ALSO: SECT_SINK (hitag 0), SECT_UNDERWATER (hitag 8)                  

^11@tag8
^10HITAG 8:        SECT_UNDERWATER
                TAG2 = match

        Underwater area - floating to the ceiling of this area will teleport
        the player to the DIVE_AREA (hitag 7) with a matching UNIQUE non
        zero match tag. IMPORTANT: The over- and underwater sectors need to
        have congruent shapes, and the SECT_DIVE_AREA sprite and the
        SECT_UNDERWATER sprite need to be in the same relative position for
        both of their respective sectors. IMPORTANT: A zero in TAG2 denotes
        that this is a swim area with no matching SECT_DIVE_AREA. This can be
        used for areas where the player cannot surface.
        EXAMPLES: BA in EXAMPLE.MAP
        SEE ALSO: SECT_DIVE_AREA (hitag 7), SECT_UNDERWATER2 (hitag 9)

^11@tag9
^10HITAG 9:        SECT_UNDERWATER2
                TAG2 = match
        TAG3 = type
                        0/32 = surface here
                        1    = can't surface here

        Secondary Underwater area - floating to the surface of this area will
        teleport you to the SECT_DIVE_AREA (hitag 7) with a matching unique
        match tag. SECT_UNDERWATER2 allows you to split an underwater area
        into multiple sectors, while still having a single large DIVE_AREA
        sector.
        EXAMPLES: BA in EXAMPLE.MAP
        SEE ALSO: SECT_DIVE_AREA (hitag 7), SECT_UNDERWATER (hitag 8)

^11@tag16
^10HITAG 16:       SO_ANGLE
        TAG4 = Angle of Sector Object

        Place this anywhere in a sector object to tell Shadow Warrior which
        end is the front. This will affect the orientation of a sector
        object as it follows a track or is operated by the player.
        EXAMPLES: EE, EF, and FA in EXAMPLE.MAP

^11@tag19
^10HITAG 19:       SECT_FLOOR_PAN
                TAG2  = speed - 0 to 16386
                TAG4  = ang
                BOOL1 = Move with speed of sector object

        This causes the floor of the sector it's in to pan in the direction
        indicated by TAG4 at the rate indicated by TAG2. Set BOOL1 to "1"
        if the sector is part of a sector object and you want the floor to
        pan at the same speed the sector object is moving. The BOOL1 feature
        is primarily used to simulate moving tank treads on driveable
        sector objects.
        EXAMPLES: BB in EXAMPLE.MAP
        SEE ALSO: SECT_CEILING_PAN (hitag 21), WALL_PAN_SPEED (hitag 23)

^11@tag21
^10HITAG 21:       SECT_CEILING_PAN
                TAG2  = speed - 0 to 16386
                TAG4  = ang
                BOOL1 = Move with speed of sector object

        This causes the ceiling of the sector it's in to pan in the direction
        indicated by TAG4 at the rate indicated by TAG2. Set BOOL1 to "1"
        if the sector is part of a sector object and you want the ceiling
        to pan at the same speed the sector object is moving.
        EXAMPLES: BB in EXAMPLE.MAP
        SEE ALSO: SECT_FLOOR_PAN (hitag 19), WALL_PAN_SPEED (hitag 23)

^11@tag23
^10HITAG 23:       WALL_PAN_SPEED
                TAG2  = speed - 0 to 16386
                TAG4  = point sprite at desired wall
                TAG6  = angle of panning
        BOOL1 = Move with speed of sector object

        Point the sprite at the wall you want it to affect. That wall's
        texture will pan in the direction indicated by TAG6 at the rate
        indicated by TAG2. Set BOOL1 to "1" if the wall is part of a
        sector object and you want the wall texture to pan at the same
        speed the sector object is moving. This feature is usually used
        to simulate tank treads on driveable sector objects.
        EXAMPLES: BB in EXAMPLE.MAP
        SEE ALSO: SECT_CEILING_PAN (hitag 21), SECT_FLOOR_PAN (hitag 19)

^11@tag29
^10HITAG 29:       SECT_LOCK_DOOR
        TAG2 = type
                        1 = RED KEYCARD
                        2 = BLUE KEYCARD
                        3 = GREEN KEYCARD
                        4 = YELLOW KEYCARD
                        5 = GOLD MASTER KEY
                        6 = SILVER MASTER KEY
                        7 = BRONZE MASTER KEY
                        8 = RED MASTER KEY

        Lock the door. Must have the correct key to open it. Works for
        rotating, sliding, and all vator uses including switches. Place it in
        the same sector with a SECT_VATOR (hitag 92), SECT_ROTATOR
        (hitag 143), or SECT_SLIDOR (hitag 145).
        EXAMPLES: EB in EXAMPLE.MAP

^11@tag30
^10HITAG 30:       SPRI_CLIMB_MARKER
                TAG4 = angle

        Center this sprite on the ladder and set the angle pointing out away
        from the wall. The position of the sprite is important, because that
        is the (x,y) location the player sprite will be in while climbing
        the ladder. Used in conjunction with TAG_WALL_CLIMB (walltag 305).
        EXAMPLES: BC and DF in EXAMPLE.MAP

^11@tag31
^10HITAG 31:       SECT_SO_SPRITE_OBJ

        Place this ST1 anywhere in a sector object. Makes a sector object
        become a "sprite object." The sprites will move but the sectors will
        not. Sprite objects can cross sector boundries, whereas regular
        sector objects cannot.
        EXAMPLES: EC in EXAMPLE.MAP

^11@tag32
^10HITAG 32:       SECT_SO_DONT_BOB

        Mark a sector in a bobbing sector object so it will not bob with the
        rest of the sector. Look at the boat in $WHIRL.MAP for an example.
        SEE ALSO: SO_BOB_START (hitag 52), SO_BOB_SPEED (hitag 53)

^11@tag33
^10HITAG 33:       SECT_SO_SINK_DEST
                TAG2 = offset

        Mark a sector in a sector object as the destination for sinking.
        It will not sink with other sectors. TAG2 is the offset from the
        sector's current floor height to use as the sinking destination.
        Look at the boat in $WHIRL.MAP for an example.
        SEE ALSO: SECT_SO_DONT_SINK (hitag 34)

^11@tag34
^10HITAG 34:       SECT_SO_DONT_SINK

        Mark a sector in a sector object so it will not sink with other
        sectors. Look at the boat in $WHIRL.MAP for an example.
        SEE ALSO: SECT_SO_SINK_DEST (hitag 33)

^11@tag37
^10HITAG 37:       SECT_SO_FORM_WHIRLPOOL
                TAG2 = depth

        Lower the whirlpool sectors to a 'depth' level, when the appropriate
        track sprite is reached by the sector object.
        (TRACK_SO_FORM_WHIRLPOOL, tracktag 724) Look at the boat in
        $WHIRL.MAP for an example.

^11@tag38
^10HITAG 38:       SECT_ACTOR_BLOCK

        Mark a sector to keep enemy actors from entering, but the player can
        still enter. Both enemies and the player can still fire weapons
        through the sector.
        EXAMPLES: BC in EXAMPLE.MAP

^11@tag42
^10HITAG 42:       MULTI_PLAYER_START
                TAG2 = (0 to 7) player number
                TAG4 = angle to start facing

        These mark the positions where players will spawn in WangBang games.
        The players' feet will be placed at the same height as the bottom of
        the ST1 sprite, so place them on the floor unless you want the player
        to fall. Always be sure to include start point 0.
        EXAMPLES: Any game map
        SEE ALSO: MULTI_COOPERATIVE_START (hitag 48)

^11@tag43
^10HITAG 43:       FIREBALL_TRAP
        TAG2 = match
        TAG4 = angle

        Shoots a fireball from the location of this sprite in the direction
        the angle is pointing when a sector tagged TAG_TRIGGER_MISSILE_TRAP
        (sector tag 43) is stepped on.
        EXAMPLES: BD in EXAMPLE.MAP
        SEE ALSO: BOLT_TRAP (hitag 44), SPEAR_TRAP (hitag 63)

^11@tag44
^10HITAG 44:       BOLT_TRAP
        TAG2 = match
        TAG4 = angle

        Shoots a rocket from the location of this sprite in the direction the
        angle is pointing when a sector tagged TAG_TRIGGER_MISSILE_TRAP
        (sector tag 43) is stepped on.
        EXAMPLES: BD in EXAMPLE.MAP
        SEE ALSO: FIREBALL_TRAP (hitag 43), SPEAR_TRAP (hitag 63)

^11@tag45
^10HITAG 45:       SECT_SO_DONT_ROTATE

        Causes a sector object to move without rotating as it follows its
        track or is driven by the player. Place in the center sector.
        EXAMPLES: FB in EXAMPLE.MAP
        SEE ALSO: SO_TURN_SPEED (hitag 55), SO_LIMIT_TURN (hitag 68)

^11@tag46
^10HITAG 46:       PARALLAX_LEVEL
                TAG2 = parallax sky type

        Set parallax sky type to 0, 1, or 2. This value adjusts the xrepeat
        of the sky texture. You only need to place one per level in a single
        sector that uses a parallax sky texture, and it will affect the whole
        level. If more than one is placed in a map, the sky will usually
        behave strangely.
        EXAMPLES: BE in EXAMPLE.MAP

^11@tag47
^10HITAG 47:       SECT_DONT_COPY_PALETTE

        Normally any sprites or the player standing on a palette swapped
        floor take on the palette of the floor. Use this ST1 on sectors where
        you don't want this to happen.
        EXAMPLES: BE in EXAMPLE.MAP

^11@tag48
^10HITAG 48:       MULTI_COOPERATIVE_START
                TAG2 = (0 to 7) player number
                TAG4 = angle to start facing

        Spawn spots for cooperative multi-player games. The players' feet
        will be placed at the same height as the bottom of the ST1 sprite,
        so place them on the floor unless you want the player to fall.
        Always be sure to include start point 0.
        EXAMPLES: Any game map
        SEE ALSO: MULTI_PLAYER_START (hitag 42)

^11@tag49
^10HITAG 49:       SO_SET_SPEED
                TAG2 = speed (2 to 128)

        Sets the speed at which a sector object follows a track. This is
        functionally the same as TRACK_SET_SPEED (tracktag 702).
        EXAMPLES: FA in EXAMPLE.MAP

^11@tag50
^10HITAG 50:       SO_SPIN
                TAG2 = speed

        Causes a sector object to spin clockwise at the rate specified in
        TAG2. This is functionally the same as TRACK_SPIN (tracktag 715).
        EXAMPLES: EC in EXAMPLE.MAP
        SEE ALSO: SO_SPIN_REVERSE (hitag 51)

^11@tag51
^10HITAG 51:       SO_SPIN_REVERSE
                TAG2 = speed

        Causes a sector object to spin counter-clockwise at the rate
        specified in TAG2. This is functionally the same as
        TRACK_SPIN_REVERSE (tracktag 720).
        EXAMPLES: EC in EXAMPLE.MAP
        SEE ALSO: SO_SPIN (hitag 50)

^11@tag52
^10HITAG 52:       SO_BOB_START
                TAG2 = bobbing amount

        Causes a sector object to bob up and down continuously. TAG2
        specifies how high the object will bob. This is functionally the
        same as TRACK_BOB_START (tracktag 717).
        EXAMPLES: $WHIRL.MAP
        SEE ALSO: SO_BOB_SPEED (hitag 53), SECT_SO_DONT_BOB (hitag 32)

^11@tag53
^10HITAG 53:       SO_BOB_SPEED
                TAG2 = speed

        Place in the same sector with SO_BOB_START (hitag 52). TAG2
        specifies the speed at which the sector object will bob. This is
        functionally the same as TRACK_BOB_SPEED (tracktag 718).
        EXAMPLES: $WHIRL.MAP
        SEE ALSO: SO_BOB_START (hitag 52), SECT_SO_DONT_BOB (hitag 32)

^11@tag55
^10HITAG 55:       SO_TURN_SPEED
                TAG2 = speed (0 is fastest)

        Determines how fast a sector object turns to meet the new angle as it
        follows a track. The default is 4. For some reason this has no track
        tag functional equivalent.
        EXAMPLES: FA in EXAMPLE.MAP
        SEE ALSO: SECT_SO_DONT_ROTATE (hitag 45), SO_LIMIT_TURN (hitag 68)

^11@tag56
^10HITAG 56:       LAVA_ERUPT
                TAG2  = (1 to 1024) The larger the number the more stuff
                       erupts.
                TAG3  = type of eruption
                        0 = lava shards
            1 = volcano boulders
                TAG4  = angle of eruption
                TAG5  = angle delta from TAG4
                TAG6  = max x/y velocity 
                TAG7  = z velocity amount
                TAG8  = z velocity random amount - added to TAG5 value
                TAG9  = erupt for this many seconds - default 10
        TAG10 = wait for this many seconds till next eruption
        BOOL1 = don't spawn unless player is in TRIGGER_SECTOR

        This ST1 will spawn lava debris at its location. The lava will
        constantly erupt in intervals (killing framerate) unless BOOL1 is
        set to "1", in which case you will need to set up trigger sectors.
        See TRIGGER_SECTOR (hitag 140.) Then the lava will only erupt while
        the player is standing in those sectors.
        EXAMPLES: BF in EXAMPLE.MAP

^11@tag57
^10HITAG 57:       SECT_EXPLODING_CEIL_FLOOR
                TAG2 = match

        Pulls the ceiling and floor together at pre-map. The ceiling and
        floor can then be explosively blown apart by shooting a
        TAG_SPRITE_HIT_MATCH (lotag 257), otherwise known as a crack
        sprite. The TAG_SPRITE_HIT_MATCH hitag must match TAG2 of this ST1.
        EXAMPLES: CA in EXAMPLE.MAP
        SEE ALSO: SECT_COPY_DEST (hitag 58), SECT_COPY_SOURCE (hitag 59)

^11@tag58
^10HITAG 58:       SECT_COPY_DEST
        TAG2 = match
        TAG3 = sector source-dest match
                
        Effectively copies all of the source sector attributes to the
        destination sector when triggered. This is probably the most
        powerful feature of Shadow Warrior, because it lets you do so many
        cool things to a map. Examples are scattered throughout almost
        every map. You can do things like blow a hole in the floor and reveal
        a hidden swimmable stream, lava pool, or gettable item. It will move
        sprites from the source to the destination also. It's very important
        that the source and destination sectors be congruent. TAG2 is an
        event match (i.e. hit a switch and the copy occurs), while TAG3
        serves to identify which source sector belongs to which destination
        sector when copying multiple sectors at the same time. Copy sector
        58-59 tags will activate in conjuction with matching SECT_MOVE_WALL
        (hitag 103) tags AFTER the copy is done. Copy sector 58-59 tags
        should remove any visible sprites from the destination sector,
        although this doesn't apply to gettable items. Copy sector 58-59
        tags will activate in conjuction with matching SPAWN_SPOT tags
        AFTER the copy is done.
        EXAMPLES: CB in EXAMPLE.MAP
        SEE ALSO: SECT_COPY_SOURCE (hitag 59), SECT_EXPLODING_CEIL_FLOOR
                  (hitag 57)

^11@tag59
^10HITAG 59:       SECT_COPY_SOURCE
        TAG2 = match
        TAG3 = sector source-dest match

        This is the source from which a destination sector is copied. See
        SECT_COPY_DEST (hitag 58) for more information.
        EXAMPLES: CB in EXAMPLE.MAP
        SEE ALSO: SECT_COPY_DEST (hitag 58), SECT_EXPLODING_CEIL_FLOOR
                  (hitag 57)

^P
^11@tag62
^10HITAG 62:       SHOOT_POINT
                TAG2 = match - if non 0 then it will call
                       DoMatchEverything every time sector object is fired.
                       Can be a one time operation with BOOL1. 
                TAG3 = ammo type
            -1/255 = Do nothing shoot point - primarily to make
                                 the player's weapon go away
                        0      = Tank shell
                        1      = Machine gun
                        2      = Laser
                        3      = Rail gun
                        4      = Fireball
                        5      = Rocket
                        6      = Micro Missle Battery
                TAG4 = angle
                TAG5 = delay until next fire in 120th of a second tics
                       (i.e. 60 = half a second) Defaults to 80, except
                       ammo type 1, which defaults to 6.
                TAG6 = Sound Spot match - Calls SOUND_SPOT (hitag 134) with
                       this match tag
                BOOL1= If "1" then TAG2 is reset to 0 after the first use.
        
        For operational sector objects and auto turrets. Sets the point
        from which the sector object shoots. Place on the end of a gun barrel
        and point the sprite in the desired shooting direction. When a shoot
        point exists on an operational sector object, the player's weapon is
        no longer used, otherwise the player's weapon stays up. Sometimes
        TAG6 is not needed because some ammo types have default sounds.
        EXAMPLES: EE and EF in EXAMPLE.MAP

^11@tag63
^10HITAG 63:       SPEAR_TRAP
        TAG2 = match
        TAG4 = ang

        Shoots an arrow from the location of this sprite in the direction
        the angle is pointing when a sector tagged TAG_TRIGGER_MISSILE_TRAP
        (sector tag 43) is stepped on.
        EXAMPLES: BD in EXAMPLE.MAP
        SEE ALSO: FIREBALL_TRAP (hitag 43), BOLT_TRAP (hitag 44)

^11@tag64
^10HITAG 64:       SO_SYNC1

        Place in a sector object. Keeps sector objects running a constant
        rate so they can stay in sync better if needed. Possibly useful for
        meshing gears or something. If it's rideable use SYNC1. Only use
        this when you absolutely need to. (NOTE: This isn't used anywhere in
        Shadow Warrior, and probably isn't even necessary.)
        SEE ALSO: SO_SYNC2 (hitag 65)

^11@tag65
^10HITAG 65:       SO_SYNC2

        Same as SO_SYNC1 (hitag 64), only slightly faster. If it's rideable
        use SYNC1. Only use this when you absolutely need to. (NOTE: This
        isn't used anywhere in Shadow Warrior, and probably isn't even
        necessary.)

^11@tag66
^10HITAG 66:       DEMO_CAMERA
                TAG2 = delta ang
                TAG3 = camera type (0 or 1)
                TAG4 = angle

        A third person camera view which is used when playing back demos, or
        when playing with the -cam command line option. Point it in the
        direction you want the camera to face. TAG2 is the amount the camera
        will turn in either direction (512 = 90 degrees). If TAG3 is 1, then
        a special camera will be used which orbits around the player at a
        constant distance, speed, and height, until the player moves out of
        the camera's view.
        EXAMPLES: FD in EXAMPLE.MAP
        SEE ALSO: MIRROR_CAM (hitag 1000)

^11@tag68
^10HITAG 68:       SO_LIMIT_TURN
                TAG2 = delta ang

        Limit the turning of sector object. Especially useful with turrets.
        Point the SO_LIMIT_TURN sprite in the center direction. TAG2 is the
        amount the sector object can pivot in either direction.
        (512 = 90 degrees either way, for a 180 degree total range of motion)
        EXAMPLES: EE in EXAMPLE.MAP
        SEE ALSO: SECT_SO_DONT_ROTATE (hitag 45), SO_TURN_SPEED (hitag 55)

^11@tag69
^10HITAG 69:       SPAWN_SPOT
                TAG2 = Match
                TAG3 = Type of effect to spawn
                        0  = Nothing
                        1  = Breaking glass
                        2  = Wood smashed
                        3  = Smoke, but only used for damaged sector objects
                        4  = Rice paper (silent)
                        5  = Blood splat (silent)
                        6  = Standard explosion
                        7  = Explosion w/phosphorous
                        8  = Breaking metal
                        9  = Crumbling stone
                        11 = Gib splat
                        12 = Wood smashed
                        13 = Crumbling stone
                TAG4 = Direction debris flies out in
                TAG5 = Time delay before activating in 1/8 second tics 
                TAG6 = Always set this equal to TAG3
                TAG8 = Number of shrap pieces (default value of 0 will pick a
                       programmed default number) 
                TAG9 = Random Z range in pixels from ST1 z position
                TAG10= Increase size of shraps (0-255)

        Spawn some effect triggered by just about anything. This is used a
        lot throughout the game for various special effects, including
        crumbling ceilings, large complex explosions, and breakable sprites.
        EXAMPLES: CC in EXAMPLE.MAP
        SEE ALSO: SECT_EXPLODING_CEIL_FLOOR (hitag 57), SPAWN_ITEMS
                  (hitag 149)

^11@tag70
^10HITAG 70:       SO_MATCH_EVENT
                TAG2  = Match
                TAG3  = Spin_speed adjust - can be negative or positive
                TAG7  = Velocity adjustment
                BOOL1 = Velocity adjustment type
                        0: Velocity adjust is instant
                        1: Velocity adjust is approached
                BOOL2 = Direction flip
                        0: False
                        1: True
                BOOL3 = Toggle help only used for triggers and things that
                        don't have a definite ON/OFF.
                        0: Off
                        1: On

        Certain sector object effects, like SO_SCALE_INFO (hitag 100) and
        SO_KILLABLE (hitag 80), can be triggered by a match tag event.
        This is accomplished using SO_MATCH_EVENT. The adjustment values
        are added when the event is ON, and they are subtracted when the
        event is OFF. You may need to experiment with this a bit, since we
        didn't use it very much in the game.
        EXAMPLES: EE in EXAMPLE.MAP

^11@tag71
^10HITAG 71:       SO_SLOPE_FLOOR_TO_POINT
                
        Aligns a sloping floor sector in a sector object to a point tagged as
        TAG_WALL_ALIGN_SLOPE_TO_POINT (walltag 550). Generally used with
        a spike or drill effect rising up from the floor. See also
        SO_SLOPE_CEILING_TO_POINT (hitag 72).

^11@tag72
^10HITAG 72:       SO_SLOPE_CEILING_TO_POINT

        Aligns a sloping floor sector in a sector object to a point tagged as
        TAG_WALL_ALIGN_SLOPE_TO_POINT (walltag 550). Generally used with
        a tornado or whirlpool effect coming down from the ceiling. See also
        SO_SLOPE_FLOOR_TO_POINT (hitag 71).
        EXAMPLES: ED in EXAMPLE.MAP

^11@tag73
^10HITAG 73:       SO_TORNADO

        This sets up a sector object to behave like a tornado.
        EXAMPLES: ED in EXAMPLE.MAP
        SEE ALSO: SO_AMOEBA (hitag 75), SO_AUTO_TURRET (hitag 81)

^11@tag75
^10HITAG 75:       SO_AMOEBA

        This sets up a sector object to behave like an amoeba.
        EXAMPLES: EC in EXAMPLE.MAP
        SEE ALSO: SO_TORNADO (hitag 73), SO_AUTO_TURRET (hitag 81),
                  SO_SCALE_INFO (hitag 100)

^11@tag76
^10HITAG 76:       SO_MAX_DAMAGE
                TAG2 = Max amount of damage a sector object can take before
                       breaking
                TAG3 = Always set to 0
                TAG5 = Initial damage setting (-1 is broken) - if this value
                       is 0 it is set to the value of TAG2 (full health)

        Damage for operational and auto turret sector objects. Sector objects
        only take damage from explosive type weapons, not machine gun types.
        Be sure to add a SPAWN_SPOT (hitag 69) with TAG3 set to 3 for the
        smoke effect. When the driveable is broken, it will trigger the
        smoke, and when the object is repaired, the smoke will go away again.
        EXAMPLES: EE in EXAMPLE.MAP
        SEE ALSO: SO_KILLABLE (hitag 80)

^11@tag77
^10HITAG 77:       SO_RAM_DAMAGE
                TAG2 = Damage amount

        Damage amount done by ramming with an operational sector object.
        Not needed for running over actors, since this is done by default.
        This is usually used for ramming killable sector objects or other
        operational sector objects.

^11@tag80
^10HITAG 80:       SO_KILLABLE
                
        Marks a sector object as killable. A sector object can be killed
        either when it receives enough damage, set by SO_MAX_DAMAGE
        (hitag 76), or when a match event occurs, set by SO_MATCH_EVENT
        (hitag 70). A killable sector object is actually completely
        deleted by becoming part of the sector surrounding the sector object.
        EXAMPLES: EE in EXAMPLE.MAP

^11@tag81
^10HITAG 81:       SO_AUTO_TURRET

        A sector object with a SO_AUTO_TURRET ST1 will always turn to face
        the player. Useful for a variety of effects, since it won't shoot the
        player unless you give it a SHOOT_POINT (hitag 62). A SHOOT_POINT
        on an auto turret will only fire the machine gun ammo type. The
        sector object center must have a sector hitag of 96 or 98 for this to
        work properly.
        EXAMPLES: EE in EXAMPLE.MAP
        SEE ALSO: SO_AMOEBA (hitag 75), SO_TORNADO (hitag 73)

^11@tag82
^10HITAG 82:       SECT_DAMAGE
                TAG2  = Damage done per second
                BOOL1 = 0, Does damage when touching floor of sector
                BOOL1 = 1, Does damage above sector - like swimming in lava

        Causes a sector to do damage to players and actors.
        EXAMPLES: CD in EXAMPLE.MAP

^11@tag84
^10HITAG 84:       WARP_TELEPORTER
                TAG2   = Match
                TAG3   = Type
                        0 = (default) Always teleports you to the matching
                            sprite location at the angle the sprite is facing
                        1 = (offset)  Always teleports you by the offset.
                            Does not affect the angle.
                TAG4   = Angle
                TAG5-8 = Random match locations in addition to TAG2
                TAG10  = Teleport or don't
                        0 = (two-way) Teleport when you enter this sector
                        1 = (one-way) Don't teleport when you hit this sector

        Magic teleporter warps just about anything from one sector to
        another. If TAG3 is "0", then a magic shimmering effect and sound
        will occur. It is very important that the destination sector be at
        least as large as the source sector, or the game may quit with an
        error.
        EXAMPLES: CD in EXAMPLE.MAP
        SEE ALSO: WARP_CEILING_PLANE (hitag 85), WARP_FLOOR_PLANE (hitag 86),
                  WARP_COPY_SPRITE1 (hitag 87), WARP_COPY_SPRITE2 (hitag 88)

^11@tag85
^10HITAG 85:       WARP_CEILING_PLANE
                TAG2 = Match

        If the player's view (or a NPC Z coordinate) goes ABOVE the
        Z position of this ST1 sprite then a warp to the Z coordinate of
        the matching WARP_FLOOR_PLANE (hitag 86) will occur.
        EXAMPLES: CE in EXAMPLE.MAP
        SEE ALSO: WARP_TELEPORTER (hitag 84), WARP_FLOOR_PLANE (hitag 86),
                  WARP_COPY_SPRITE1 (hitag 87), WARP_COPY_SPRITE2 (hitag 88),

^11@tag86
^10HITAG 86:       WARP_FLOOR_PLANE
                TAG2 = Match

        If the player's view (or a NPC Z coordinate) goes BELOW the
        Z position of this ST1 sprite then a warp to the Z coordinate of the
        matching WARP_CEILING_PLANE will occur.
        EXAMPLES: CE in EXAMPLE.MAP
        SEE ALSO: WARP_CEILING_PLANE (hitag 85), WARP_TELEPORTER (hitag 84),
                  WARP_COPY_SPRITE1 (hitag 87), WARP_COPY_SPRITE2 (hitag 88)

^11@tag87
^10HITAG 87:       WARP_COPY_SPRITE1
                TAG2 = Match WARP_COPY_SPRITE2 tag

        Any sprite that enters a sector marked with WARP_COPY_SPRITE1 will
        cause a duplicate image to appear in the sector marked with a
        WARP_COPY_SPRITE2 (hitag 88) with matching TAG2.
        EXAMPLES: CE in EXAMPLE.MAP
        SEE ALSO: WARP_CEILING_PLANE (hitag 85), WARP_FLOOR_PLANE (hitag 86),
                  WARP_TELEPORTER (hitag 84), WARP_COPY_SPRITE2 (hitag 88)

^11@tag88
^10HITAG 88:       WARP_COPY_SPRITE2
                TAG2 = match WARP_COPY_SPRITE1 tag

        Any sprite that enters a sector marked with WARP_COPY_SPRITE2 will
        cause a duplicate image to appear in the sector marked with a
        WARP_COPY_SPRITE2 (hitag 87) with matching TAG2.
        EXAMPLES: CE in EXAMPLE.MAP
        SEE ALSO: WARP_CEILING_PLANE (hitag 85), WARP_FLOOR_PLANE (hitag 86),
                  WARP_COPY_SPRITE1 (hitag 87), WARP_TELEPORTER (hitag 84)

^11@tag90
^10HITAG 90:       PLAX_GLOB_Z_ADJUST
                TAG2 = Ceiling z movement in pixels 
                TAG3 = Floor z movement in pixels 
                
        Global parallax ceiling and floor adjustment. Default is 500 pixels.
        This affects how far past the actual surface height a sprite can
        move in sectors with parallax ceilings and floors.
        SEE ALSO: FLOOR_Z_ADJUST (hitag 98), CEILING_Z_ADJUST (hitag 97),
                  SECT_SINK (hitag 0)

^11@tag92
^10HITAG 92:       SECT_VATOR
        TAG2 = match
        TAG3 = Type
                        0 = Manual/Switch/Trigger - Primarily used for a
                            basic manually operated door. If a manual type
                            has a match tag that is not 0 then ALL vators
                            with the same match type will be operated on.
                            Manual operation - works from either within the
                            sector or alongside of the sector.
                            Switch operation - switch resets when the vator
                            goes to default position.
                            Trigger operation - same as switch but it's a
                            floor trigger.
                        1 = Switch/Trigger Only - Cannot be operated manually
                            ALL vator types with the same matching tag get
                            operated on
                        2 = Automatic - Starts Active
                        3 = Automatic - Starts Inactive - must be turned on
                            with a switch or trigger
                TAG4 = Speed
                TAG5 = Acceleration at which door approaches TAG4
                TAG6 = Match at destination - when a vator reaches its
                       destination it will trigger any event with this
                       match tag
                TAG9 = Auto return time - 1/8th of a second resolution - if
                       non 0 then the vator will return to default position
                       after alloted time - if 0 then it will stay in the on
                       position until operated again
                BOOL1=  0: Start in the off position
                        1: Start in the on position
                BOOL2=  0: Toggle
                        1: Operate once only
                BOOL3=  0: Crush player
                        1: Don't crush player
                BOOL4 = 0: Operate in WangBang games
                        1: Not allowed to operate in WangBang games
                BOOL5 = 0: Don't call TAG6 match when moving to OFF position
                        1: Call TAG6 match when moving to the ON or OFF
                           position
                BOOL6 = 0: Wait until motion is complete before it can be
                           operated again
                        1: Can be operated again while sector is in motion
                BOOL7 = 0: Actors are allowed to operate this vator
                        1: Actors can't operate this vator
                BOOL11= 1: Displays "Single play only" message when
                           operated in WangBang. Use with BOOL4.

Elevators, stompers, doors, lifts and other tricks are collectively called
"vators." The "off" position is the position of the sector in BUILD, the "on"
position is the height of the ST1 sprite. Flip the ST1 sprite upside down
(by pressing "F" twice on it) to do a ceiling vator like a door or stomper.
Any vator can be locked by placing a SECT_LOCK_DOOR (hitag 29) in the same
sector. Two SECT_VATOR sprites can be placed in a sector to operate the
ceiling and floor separately.
EXAMPLES: DB in EXAMPLE.MAP
SEE ALSO: SECT_ROTATOR (hitag 143), SECT_SLIDOR (hitag 145),
          SECT_SPIKE (hitag 106)

^11@tag97
^10HITAG 97:       CEILING_Z_ADJUST
                TAG2 = Amount

        Allows the player and actors to 'sink' into the ceiling of a sector
        by the amount in TAG2. The player view will probably be strange
        unless the ceiling texture is a parallax sky.
        EXAMPLES: $VOLCANO.MAP
        SEE ALSO: PLAX_GLOB_Z_ADJUST (hitag 90), FLOOR_Z_ADJUST (hitag 98),
                  SECT_SINK (hitag 0)

^11@tag98
^10HITAG 98:       FLOOR_Z_ADJUST
                TAG2 = Amount

        Allows the player and actors to sink into the floor of a sector
        by the amount in TAG2.
        EXAMPLES: AB and CE in EXAMPLE.MAP
        SEE ALSO: PLAX_GLOB_Z_ADJUST (hitag 90), CEILING_Z_ADJUST (hitag 97),
                  SECT_SINK (hitag 0)

^11@tag99
^10HITAG 99:       FLOOR_SLOPE_DONT_DRAW

        Use this ST1 in any sector with a sloped floor and the slope angle
        will be set to 0 when the scene is drawn. The sector will still act
        like a slope for all movement purposes.
        EXAMPLES: CE in EXAMPLE.MAP

^11@tag100
^10HITAG 100:      SO_SCALE_INFO
        TAG2 = Speed
                TAG3 = Start position
                       0 = start at min
                       1 = start at max
                TAG4 = Initial type
                       0 = None
                       1 = Hold
                       2 = Destination
                       3 = Random
                       4 = Cycle
                       5 = Random point
                           Needs SO_SCALE_POINT_INFO (hitag 101)
                TAG5 = Min dist - distance from default size to scale inward
                TAG6 = Max dist - distance from default size to scale outward
                TAG7 = Activate type - same types as TAG4, but this what
                       happens after the sector object is activated with a
                       SO_MATCH_EVENT (hitag 70)
                TAG8 = Random frequency (0-64) - The lower the number the
                       slower the random direction change.

        This allows you to scale simple sector objects. "Hold" type maintains
        the default scale. "Destination" moves either to the minimum or
        maximum scaling size. "Random" is just that - the sector object
        scales larger and smaller randomly. "Cycle" continuously scales from
        min to max and back again. "Random point" is just like a SO_AMOEBA
        (hitag 75), except that SO_SCALE_INFO gives you greater control over
        its behavior.
        EXAMPLES: EE in EXAMPLE.MAP, the amoeba in $SHRINE.MAP
        SEE ALSO: SO_AMOEBA (hitag 75), SO_SCALE_POINT_INFO (hitag 101)

^P
^11@tag101
^10HITAG 101:      SO_SCALE_POINT_INFO
        TAG2 = Speed
        TAG4 = Random freqency - 0 to 1024 - the lower the number
                       the slower the direction change
        TAG5 = Min dist - dist from default size to scale inward
        TAG6 = Max dist - dist from default size to scale outward

        SO_SCALE_POINT_INFO is used with a SO_SCALE_INFO (hitag 100) ST1 to
        provide information about how the vertices should behave. TAG5 and
        TAG6 are used to designate how far in and out the individual
        vertices should move at the speed in TAG2. Be careful; when wall
        points cross each other, strange and unpredictable sector behavior
        can occur.
        EXAMPLES: The amoeba in $SHRINE.MAP
        SEE ALSO: SO_AMOEBA (hitag 75), SO_SCALE_INFO (hitag 100)

^11@tag102
^10HITAG 102:      SO_SCALE_XY_MULTIPLY
                TAG5 = x multiply value; 256 is equal to 1
        TAG6 = y multiply value; 256 is equal to 1

        Use in conjunction with SO_SCALE_INFO (hitag 100) and
        SO_SCALE_POINT_INFO (hitag 101). Try experimenting with this to see
        what kind of effects you can achieve.

^11@tag103
^10HITAG 103:      SECT_WALL_MOVE
                TAG2 = Match - triggering one of these will trigger all
                       SECT_WALL_MOVE ST1's with the same matching tags.
                       This will also trigger SPAWN_SPOT ST1's.
                TAG3 = Match with a SECT_WALL_MOVE_CANSEE (hitag 104)
                TAG4 = Angle - point in the direction you want the wall point
                       to move
                TAG5 = Pic 1 - Next wall texture
                TAG6 = Pic 2 - Previous wall texture 
                TAG7 = Shade 1 - Next wall shade
                TAG8 = Shade 2 - Previous wall shade
                TAG9 = Number of times the point can be shot
                TAG10= Random angle difference - 1 to 128 - the larger the
                       number the greater the angle deviance.
                TAG13= Distance to move point each time it's shot
                BOOL1= 0: Can work independently
                       1: Only activated as part of a TAG3 group

        This creates a dentable wall. Every time the wall vertex is shot with
        an explosive weapon, it will move the distance in TAG13, up to TAG9
        times. Place the ST1 sprite on TOP of the vertex to move. One vertex
        will move. Every vertex is associated with two walls: the next wall
        and the previous wall. If TAG5 or TAG6 are non-zero, then that wall
        will take on the specified texture when the vertex is shot. If TAG7
        or TAG8 are non-zero, then that wall will take on the new shade
        value specified. This will work for sector object walls with one
        limitation: you cannot tag the outside wall loop tagged with a 504 to
        be moveable. NOTE: Changing the value of TAG13 will cause the ST1
        sprite to move strangely in 3D editing mode. Don't worry. If 2D mode
        says it's on the vertex, then it's on the vertex.
        EXAMPLES: DA in EXAMPLE.MAP
        SEE ALSO: SECT_WALL_MOVE_CANSEE (hitag 104), SPAWN_SPOT (hitag 69),
                  SECT_EXPLODING_CEIL_FLOOR (hitag 57)

^11@tag104
^10HITAG 104:      SECT_WALL_MOVE_CANSEE
                TAG2 = Match with TAG3 of SECT_MOVE_WALL (hitag 103)

        Placing sprites on wall points renders them somewhat unreliable for
        certain engine routines. If there is a problem activating a
        SECT_MOVE_WALL, set up one of these off of the wall point for the
        engine to use for detection purposes. I have never needed to use
        this.
        EXAMPLES: DA in EXAMPLE.MAP

^11@tag106
^10HITAG 106:      SECT_SPIKE
                TAG2 = Match
        TAG3 = Type
                        0 = Manual/Switch/Trigger - primarily used for manual
                            type. If a manual type has a match tag that is
                            not 0 then ALL spikes with the same match type
                            will be operated on. A spike can be manually
                            operated from either within the sector, or to the
                            side. With switch operation, the switch resets
                            when the spike goes to default position. With
                            trigger operation, it's the same as a switch but
                            it's a floor trigger.
                        1 = Switch/Trigger Only - cannot be operated manually
                            ALL spike types with the same matching tag get
                            operated on by the switch or trigger.
                        2 = Automatic - Starts active
                        3 = Automatic - Starts inactive, must be activated
                            with a switch or trigger.
                TAG4 = Speed
                TAG5 = Acceleration at which TAG4 speed is approached
                TAG6 = Match at destination - when a spike reaches its
                       destination it will trigger any event with this
                       match tag
                TAG7 = Sector object number to operate on. Set to -1 if the
                       SECT_SPIKE is not in a sector object.
                TAG9 = Auto return time - 1/8th of a second resolution - if
                       non 0 then the spike will return to its default
                       position after the alloted time. If 0 then it will
                       stay in the ON position until the spike is operated
                       again.
                BOOL1= 0: Start in the off position
                       1: Start in the on position
                BOOL2= 0: Toggle
                       1: Operate once only
                BOOL3= 0: Crush player
                       1: Don't crush player
                BOOL4= 0: Operate in WangBang games
                       1: Not allowed to operate in WangBang games
                BOOL5= 0: Don't call TAG6 match when moving to OFF position
                       1: Call TAG6 match when moving to the ON or OFF
                          position
                BOOL6= 0: Wait until motion is complete before it can be
                          operated again
                       1: Can be operated again while sector is in motion
                BOOL7= 0: Actors are allowed to operate this spike
                       1: Actors can't operate this spike
                BOOL11=1: Displays "Single play only" message when
                          operated in WangBang. Use with BOOL4.

        A "spike" is the term for a dynamic slope in Shadow Warrior. Useful
        for tilting ramps and slides, or special ceiling effects like a
        drill. A spike behaves pretty much like a vator, except instead of
        the floor height moving to the ST1, the floor instead slopes to the
        height of the ST1. Remember that slopes always hinge on the "first
        wall" of a sector (set with Alt-F). To do a spike from the ceiling,
        flip the ST1 sprite upside down (press "F" twice on the sprite in 3D
        mode). "Off" position is the position of the sector, "on" position is
        the height of the ST1 sprite. WARNING: Don't forget to put that -1
        in TAG7! Shadow Warrior will usually crash if you forget to do this.
        EXAMPLES: DC in EXAMPLE.MAP
        SEE ALSO: SECT_ROTATOR (hitag 143), SECT_SLIDOR (hitag 145),
                  SECT_VATOR (hitag 92), SLIDE_SECTOR (hitag 135)

^11@tag108
^10HITAG 108:      LIGHTING
                TAG2 = Match
                TAG3 = Type
                        0 = Constant
                        1 = Flicker
                        2 = Fade
                        3 = Flicker ON
                        4 = Fade to ON/OFF
                TAG4 = Timing - the smaller the number, the faster a light
                       flickers or fades
                TAG5 = Brighten amount - This is not an actual shade amount,
                       instead, this is the value the ST1 will subtract from
                       the sector's shade value (QUOTE-S in 3D mode) when it
                       is turned on.
                TAG6 = Darken amount - This is not an actual shade amount,
                       instead, this is the value the ST1 will add to the
                       sector's shade value when it is turned off.
                TAG7 = Shade increment/decrement for fading lights - default
                       is 1
                BOOL1= 0: Light is off
                       1: Light is on
                BOOL2= 1: Don't affect floor
                BOOL3= 1: Don't affect ceiling
                BOOL4= 1: Don't shade walls
                BOOL5= 1: Shade outer walls - red sectors have inner and
                          outer walls - by default LIGHTING will not shade
                          the outer walls
                BOOL6= 1: Don't affect the palette of the sector
                BOOL8= 1: Invert intensity. This means that the sector will
                          be brightened by TAG6 amount when the light is on,
                          and darkened by TAG5 amount when the light is off.
                          This is useful for making lights that flicker when
                          they are broken.
                BOOL10=   Direction to start a fade

        The sector will have the same palette as the LIGHTING sprite, even if
        the light is turned off. All LIGHTING ST1's with the same match tags
        will operate together.
        WARNING: Every LIGHTING sprite tends to have its own independent rate
        of fade or flicker. This means that if you a have a room comprised of
        multiple sectors and you put a flickering LIGHTING ST1 in every
        sector, they will all flicker at different rates and look really bad
        even if their TAG2's match. If you want a room of uniform flickering
        or fading, you need to place a single LIGHTING sprite in one sector
        and use LIGHTING_DIFFUSE (hitag 109) in all the sectors you want to
        share that lighting effect.
        EXAMPLES: DD in EXAMPLE.MAP
        SEE ALSO: LIGHTING_DIFFUSE (hitag 109)

^11@tag109
^10HITAG 109:      LIGHTING_DIFFUSE
                TAG2 = Match to a LIGHTING (hitag 108) TAG2
                TAG3 = Shade multiplier - the higher this number, the more
                       quickly the light grows dark with distance from the
                       light source
                TAG4 = Distance - 1 to 20 for diffuse lighting - The larger
                       the number the more distant, and therefore darker the
                       shade from the source.
                BOOL2= 1: Don't affect floor
                BOOL3= 1: Don't affect ceiling
                BOOL4= 1: Don't affect walls
                BOOL5= 1: Shade outer walls - red sectors have inner and
                          outer walls - by default LIGHTING_DIFFUSE will not
                          shade outer walls
                BOOL6= 1: Dont change palette

        Used with LIGHTING (hitag 108) to shade other sectors on a grade.
        Also used to copy a lighting effect (flickering, fading, palette)
        uniformly over multiple sectors. Though its difference from Duke
        Nukem's lighting may at first seem confusing, this method is
        actually more convenient. Once all the LIGHTING_DIFFUSE sprites are
        in place, you can change the lighting effect for an entire group of
        sectors just by changing the values of one sprite: the LIGHTING
        (hitag 108) ST1.
        EXAMPLES: DD in EXAMPLE.MAP
        SEE ALSO: LIGHTING (hitag 108)

^11@tag110
^10HITAG 110:      VIEW_LEVEL1
                TAG2 = View tag match
                TAG4 = Point up to turn it OFF
                       Point down to turn it ON

        A matching VIEW_LEVEL sprite must be in both the upper and lower
        sectors of any room-over-room areas where the player can look
        through the ceiling or floor into the other area. Use VIEW_LEVEL1
        in the lower areas. See ADVANCED.TXT for guidelines to building
        room-over-room areas.
        EXAMPLES: AC, AD, and FC in EXAMPLE.MAP
        SEE ALSO: VIEW_LEVEL2 (hitag 111), VIEW_THRU_CEILING (hitag 120),
                  VIEW_THRU_FLOOR (hitag 121), BOUND_FLOOR_BASE_OFFSET
                  (hitag 202), BOUND_FLOOR_OFFSET (hitag 203)

^11@tag111
^10HITAG 111:      VIEW_LEVEL2
                TAG2 = View tag match
                TAG4 = Point up to turn it OFF
                       Point down to turn it ON

        A matching VIEW_LEVEL sprite must be in both the upper and lower
        sectors of any room-over-room areas where the player can look
        through the ceiling or floor into the other area. Use VIEW_LEVEL2
        in the upper areas. See ADVANCED.TXT for guidelines to building
        room-over-room areas.
        EXAMPLES: AB, AE, and FE in EXAMPLE.MAP
        SEE ALSO: VIEW_LEVEL1 (hitag 110), VIEW_THRU_CEILING (hitag 120),
                  VIEW_THRU_FLOOR (hitag 121), BOUND_FLOOR_BASE_OFFSET
                  (hitag 202), BOUND_FLOOR_OFFSET (hitag 203)

^11@tag120
^10HITAG 120:      VIEW_THRU_CEILING
                TAG2 = View tag match

        Use this in a sector with a floor mirror texture on the ceiling in
        the lower half of a room-over-room area. The ST1 sprite must be in
        the same relative location in the sector as the VIEW_THRU_FLOOR
        (hitag 121) sprite in the upper sector. TAG2 will be the same as
        all the VIEW_LEVEL sprites and the VIEW_THRU_FLOOR sprite. See
        ADVANCED.TXT for guidelines to building room-over-room areas.
        EXAMPLES: AC, AD, and FC in EXAMPLE.MAP
        SEE ALSO: VIEW_LEVEL1 (hitag 110), VIEW_LEVEL2 (hitag 111),
                  VIEW_THRU_FLOOR (hitag 121), BOUND_FLOOR_BASE_OFFSET
                  (hitag 202), BOUND_FLOOR_OFFSET (hitag 203)

^11@tag121
^10HITAG 121:      VIEW_THRU_FLOOR
                TAG2 = View tag match

        Use this in a sector with a floor mirror texture on the floor in
        the upper half of a room-over-room area. The ST1 sprite must be in
        the same relative location in the sector as the VIEW_THRU_CEILING
        (hitag 120) sprite in the lower sector. TAG2 will be the same as
        all the VIEW_LEVEL sprites and the VIEW_THRU_CEILING sprite. See
        ADVANCED.TXT for guidelines to building room-over-room areas.
        EXAMPLES: AB, AE, and FE in EXAMPLE.MAP
        SEE ALSO: VIEW_LEVEL1 (hitag 110), VIEW_THRU_CEILING (hitag 120),
                  VIEW_LEVEL2 (hitag 121), BOUND_FLOOR_BASE_OFFSET
                  (hitag 202), BOUND_FLOOR_OFFSET (hitag 203)

^11@tag132
^10HITAG 132:      BREAKABLE
                TAG2 = Match - used to match up with BREAKABLE_SPRITE
                       (hitag 132 on a non-ST1 sprite) or TAG_BREAK_WALL
                       (walltag 307)
                TAG5 = Picnum to change to after BROKEN
                       Not needed if TAG8 = "1"
                TAG7 = Number of damage hits to take before a sprite or
                       wall texture is BROKEN. Note that if this is set to 2
                       or greater the picnum will increment toward TAG5 until
                       TAG5 is reached. The graphics in the art file must be
                       imported in the correct order to support this. Nothing
                       in Shadow Warrior uses this, but the functionality is
                       there for anybody who feels like importing their own
                       art.
                TAG8 = BROKEN type: 
                       0 = Change the picnum only
                       1 = Kill sprite/wallpic when BROKEN
                           For walls this will turn off masking, blocking,
                           and 1-way.
                       2 = Turn off blocking bits when BROKEN
                           For walls this will just turn off blocking bits,
                           but leave the masking or 1-way alone. Breaking
                           an air vent grate is an example of this.

        Sprites and wall breaking info. There are 2 ways to use this:
        1) As ST1 sprite info for breaking a sprite, or 2) As ST1 sprite info
        for breaking a wall. NOTE: Can be re-used for many BREAKABLE_SPRITEs.
        Example: All chairs that break could use a single ST1 132 to tell
        them how to break as long as the same matching TAG2 is used.
        When hitting a wall tagged with TAG_WALL_BREAK (307) the code will
        look for a BREAKABLE_SPRITE ST1 with a matching tag and use this info
        if found.
        EXAMPLES: DE in EXAMPLE.MAP

^10HITAG 132:      BREAKABLE_SPRITE
                (This is used with non-ST1 sprites to make them breakable)
                TAG2 = Match - used to match up with BREAKABLE ST1's
                TAG6 = Match - extra match value for activating ST1's like
                       SPAWN_SPOT and LIGHTING. By this method you can spawn
                       debris or turn off a light when this sprite is broken.
                BOOL1= 1: Denotes that this is not an ST1 but is tagged like
                          one. IMPORTANT: THIS MUST BE SET TO "1". 
                BOOL2= 1: Don't break this sprite. Use this to override
                          automatic breakables.

        Use this tagging on the actual sprite you want to break. TAG2 should
        match the TAG2 of the BREAKABLE (hitag 132) ST1 that tells this
        sprite how to break. NOTE: You don't actually need the ST1 132
        if you just want to kill the sprite when its broken. Giving it a
        hitag of 132 and setting BOOL1 is sufficient.
        EXAMPLES: DE in EXAMPLE.MAP

^11@tag133
^10HITAG 133:      QUAKE_SPOT
                TAG2 = Match
                TAG3 = Shake Z amount - This is the amount the view moves in
                       the Z direction.
                TAG4 = Radius of quake - distance in which quake is felt -
                       this value is multiplied by 8 internally for the
                       distance.  The code is set up so that the quake amount
                       decreases from the epicenter, but this effect can be
                       overridden by setting BOOL1 to "1"
                TAG5 = Duration of quake in seconds
                TAG6 = Timed quake - shake the screen every X seconds, where
                       X = TAG6 multiplied by 10.
                TAG7 = Shake angle amount - amount the view's angle moves
                TAG8 = Shake x,y position amount - multiplied by 8 internally
                TAG9 = Random quake value (1 to 128). Multiplied by 4
                       internally. Used with TAG6. Instead of automatically
                       spawning a quake after time it does a random test.
                       The larger the number the greater the chance of a
                       quake. 0 is default - will not do random test.
                BOOL1= 1: Quake does not decrease from epicenter, and will
                       basically shake the entire level.
                BOOL2= 1: Only quake once and never again
                BOOL3= 1: Wait for trigger before starting timed quake code.
                       This is only used for timed quakes.

        This is used to shake the player's view as though an earthquake were
        happening.
        EXAMPLES: DE in EXAMPLE.MAP

^11@tag134
^10HITAG 134:      SOUND_SPOT
                TAG2 = Match
                TAG4 = 1st Sound 
                TAG5 = 2nd Sound 
                TAG6 = 3rd Sound 
                BOOL1= 1: Play the sound once and only once
                BOOL2= 1: Play the sound as a looping sound. The sound will
                       continue to loop until stopped by STOP_SOUND_SPOT
                       (hitag 150).
                       1: Also means follow sprite, and needs to be set if
                       the ST1 sprite will be moving (usually with a sector
                       object.)
                BOOL3= 1: Random play. When the ST1 is triggered, it will
                       randomly choose between sounds 1 and 2 or between
                       sounds 1, 2, and 3.
                BOOL4= 1: Don't pan sound. This is useful when the sound
                       is very near the player.
                BOOL5= 1: Use doppler effect.
                BOOL6= 0: Make sure this is always reset to "0".
                BOOL7= 1: The sound is Lo Wang's voice, heard inside his
                       head at max volume no matter how far from the
                       SOUND_SPOT he is.

                SOUND_SPOT will play the sound specified in TAG4 when the
                match tag in TAG2 is triggered. SOUND_SPOT can also be
                triggered by operating a vator, spike, sliding door, or
                rotating door with the same match tag. Sound numbers can be
                obtained from the digital sound index in SWSOUNDS.TXT. Don't
                confuse these with ambient sounds, which are used with the
                AMBIENT_SOUND (hitag 1002) ST1. If SOUND_SPOT is placed in a
                sector object operational sector, the 1st sound (TAG4) will
                be the 'idle' sound. The 2nd sound (TAG5) will be the 'drive'
                sound. IMPORTANT: The match tag (TAG2) will still need to be
                a unique value even though the mapper never sets up a trigger
                for it. If you do not use a unique value then other
                SOUND_SPOTs with the match value will do the same sound
                processing. This could be used as a feature - drive something
                and something else on the level makes a noise. Note that you
                can specify 3 different sounds. Some things like vators can
                have more than one sound attached for different operations
                such as moving to the ON and OFF positions. Most of the time
                only the 1st sound (TAG4) will be used.
                EXAMPLES: DB, DC, DD, and others in EXAMPLE.MAP
                SEE ALSO: AMBIENT_SOUND (hitag 1002)

^11@tag135
^10HITAG 135:      SLIDE_SECTOR
                TAG2 = Speed value. (0 is fastest, 32 is slowest)
                       Note that the angle of the slope also has an effect on
                       speed.

        Tag a sloped sector with this and it will cause the player to
        slide in the direction of the slope. Actors are not affected. The
        steeper the slope, and the lower the TAG2 value, the faster the
        slide. Lo Wang will slide even if he is in the air over the sector.
        Use with SECT_SPIKE (hitag 106) to create a variable speed slide.
        EXAMPLES: DF in EXAMPLE.MAP
^P

^11@tag136
^10HITAG 136:      CEILING_FLOOR_PIC_OVERRIDE
                TAG2 = Picnum (from the "V" menu)
                TAG3 =  0: Pic override on the ceiling
                        1: Pic override on the floor
                TAG7 = Draw type
                        0 = normal
            1 = masked
            2 = translucent
                        3 = very translucent
                BOOL1=  1: Block hitscans

        This is primarily used to give a floor or ceiling texture to the
        floor mirror in room-over-room areas. This is used in Shadow Warrior
        to create the translucent water, the reflective floors, and the
        masked grating in $VOLCANO.MAP. A sloped floor cannot have a masked
        or translucent texture. Use with FLOOR_Z_ADJUST (hitag 98) to keep
        the player from falling through into the lower area. Actors can
        stand on it too, but will usually fall through when they are killed.
        EXAMPLES: AB and AD in EXAMPLE.MAP
        SEE ALSO: FLOOR_Z_ADJUST (hitag 98)

^11@tag140
^10HITAG 140:      TRIGGER_SECTOR
                TAG2 = Match
                TAG3 = Type
            0 = Trip Entering Sector
            1 = Trip Leaving Sector
                        2 = Continuous as long as you're standing on it
                        3 = Operated with the SPACEBAR
                TAG4 = Angle
                TAG5 = Trigger definition
                        0 = Remote sector object trigger
                        1 = Lava Erupt trigger
                TAG7 = Remote sector object number
                BOOL1= 0: Player's view follows the sector object
                       1: Player's view stays at the angle of TRIGGER_SECTOR

        TRIGGER_SECTOR is only used for two things: driving remote controlled
        operational sector objects, and triggering LAVA_ERUPT ST1's. BOOL1
        on the LAVA_ERUPT (hitag 56) sprite must be set to BOOL1 for this
        trigger to work.
        EXAMPLES: BF and EF in EXAMPLE.MAP
        SEE ALSO: SECT_OPERATIONAL (hitag 1), LAVA_ERUPT (hitag 56)

^11@tag141
^10HITAG 141:      DELETE_SPRITE
                TAG2 = Match
                BOOL2= Move with a sector object

        Place a DELETE_SPRITE ST1 at the same x, y location as another
        sprite. When the TAG2 match is triggered, the sprites at the same
        x, y will be deleted. Works on most sprites but not all. Some that
        can be deleted include decoration sprites, vator ST1's, spike ST1's,
        and room-over-room view sprites.
        EXAMPLES: DF in EXAMPLE.MAP
        SEE ALSO: BREAKABLE (hitag 132)

^11@tag143
^10HITAG 143:      SECT_ROTATOR
                TAG2 = Match
        TAG3 = Type
                        0 = Manual/Switch/Trigger. If a manual type has a
                            TAG2 value that is not 0 then ALL rotators,
                            vators, spikes, or whatever with the same TAG2
                            will be operated on. Rotators can be manually
                            operated from on top of sector or alongside of
                            it. A switch resets when the rotator returns to
                            its default position. Trigger operation is the
                            same as a switch but its a floor trigger instead.
                        1 = Switch/Trigger Only. The rotator cannot be
                            operated manually. All rotator types with the
                            same TAG2 value get operated on.
                TAG5 = Angle move amount (512 = 90 degrees). Use a negative
                       value to make the sector rotate counter-clockwise.                       
                TAG6 = Match at destination. When a rotator reaches its
                       destination it will trigger any event with this
                       match tag.
                TAG7 = Angle increment. The speed at which the sector
                       rotates. Use an unsigned value.
                TAG9 = Auto return time in 1/8th of a second resolution.
                       If non-zero then the sector will return to its default
                       position after the allotted time. If TAG9=0 then the
                       sector will remain in the ON position until the
                       SECT_ROTATOR is operated again.
                BOOL2= 1: Can be operated only once.
                BOOL4= 0: Can be operated during a WangBang game.
                       1: Cannot be operated during a WangBang game.
                BOOL5= 1: Trigger the TAG6 match when moving to the OFF
                          position as well as when moving to the ON position.
                BOOL6= 0: SECT_ROTATOR cannot be operated again until it's
                          finished moving.
                       1: Can operate it again while it's moving.
                BOOL11=1: Displays "Single play only" message when
                          operated in WangBang. Use with BOOL4.

        SECT_ROTATOR is used primarily to create rotating (swinging) doors,
        although it has many other potential uses. Any number of red
        sector walls of any shape can be rotated simultaneously around a
        single pivot point, defined by SECT_ROTATOR_PIVOT (hitag 144). 
        EXAMPLES: EA in EXAMPLE.MAP
        SEE ALSO: SECT_ROTATOR_PIVOT (hitag 144), SECT_VATOR (hitag 92),
                  SECT_SPIKE (hitag 106), SECT_SLIDOR (hitag 145).

^11@tag144
^10HITAG 144:      SECT_ROTATOR_PIVOT
                TAG2 = Match

        The CLOSEST SECT_ROTATOR (hitag 143) with same matching TAG2 will
        rotate about this sprite.
        EXAMPLES: EA in EXAMPLE.MAP
        SEE ALSO: SECT_ROTATOR (hitag 143)

^11@tag145
^10HITAG 145:      SECT_SLIDOR
                TAG2 = Match
        TAG3 = Type
                        0 = Manual/Switch/Trigger - primarily used for manual
                            type. If a manual type has a match tag that is
                            not 0 then ALL slidors with the same match type
                            will be operated on. A slidor can be manually
                            operated from either within the sector, or to the
                            side. With switch operation, the switch resets
                            when the slidor goes to default position. With
                            trigger operation, it's the same as a switch but
                            it's a floor trigger.
                        1 = Switch/Trigger Only - cannot be operated manually
                            ALL slidors with the same matching tag get
                            operated on by the switch or trigger.
                TAG5 = Distance to move (largest grid square is 1024).
                TAG6 = Match at destination. When a slidor reaches its
                       destination it will trigger any event with this
                       match tag.
                TAG7 = Move speed
                TAG8 = Acceleration at which slidor approaches TAG7 speed.
                TAG9 = Auto return time - 1/8th of a second resolution - if
                       non 0 then the slidor will return to its default
                       position after the allotted time. If 0 then it will
                       stay in the ON position until the slidor is operated
                       again.
                BOOL2= 1: Can only operate the slidor once.
                BOOL3= 1: Don't crush the player. WARNING: Never let a white
                          walled slidor crush the player, or the game will
                          quit with an error.
                BOOL4= 0: Slidor can be operated during a WangBang game.
                       1: Slidor cannot be operated during a WangBang game.
                BOOL5= 1: Insta-Close(TM) feature. Tired of not being able to
                          run through sliding doors in BUILD 3D mode? Leave
                          them open and let Shadow Warrior close them for
                          you. BOOL5 uses the position of the SECT_SLIDOR
                          sprite to close the doors.
                BOOL6= 0: Slidor cannot be operated again until it stops
                          moving.
                       1: Can operate the slidor again while it's in motion.
                BOOL7= 1: Call the TAG6 match when moving to the OFF position
                          as well as when moving to the ON position.
                BOOL11=1: Displays "Single play only" message when
                          operated in WangBang. Use with BOOL4.
        
        Use SECT_SLIDOR to create sliding or split doors. Several different
        types can be built, both with red walls and with white walls.
        Look to the game maps for various examples. IMPORTANT: The walls
        that form the edges of the door must be tagged properly in order for
        the slidor to work. If, in 2D mode, the door slides to the left, tag
        the wall TAG_WALL_SLIDOR_LEFT (walltag 220), if it slides to the
        right, tag the wall TAG_WALL_SLIDOR_RIGHT (walltag 221), if it slides
        upwards, tag it TAG_WALL_SLIDOR_TOP (walltag 222), and if it slides
        downwards, tag it TAG_WALL_SLIDOR_BOTTOM (walltag 223).
        EXAMPLES: EA in EXAMPLE.MAP
        SEE ALSO: SECT_ROTATOR (hitag 143), SECT_VATOR (hitag 92),
                  SECT_SPIKE (hitag 106)

^11@tag146
^10HITAG 146:      SECT_CHANGOR
                TAG2 = Match
                TAG4 = New picnum
                TAG5 = Z adjustment in pixels - can be negative
                TAG6 = Slope adjustment       - can be negative
                TAG7 = New shade value        - can be negative
                TAG8 = New palette value
                TAG9 = New visibility value   - can be negative
                BOOL1= 0: Affect the floor
                       1: Affect the ceiling
                BOOL2= 1: Do not kill this sprite after using once.
                          By default it is killed after one use.

        Change attibutes of sector when match code is called. Can be used
        to create breakable floor or ceiling textures, or other special
        effects. Most commonly used for shootable lights.
        EXAMPLES: EB in EXAMPLE.MAP
        SEE ALSO: SECT_COPY_DEST (hitag 58), SECT_COPY_SOURCE (hitag 59)

^11@tag147
^10HITAG 147:      SO_DRIVABLE_ATTRIB
                TAG2 = Angle speed (1 to 16384)
                       0 provides a default speed
                TAG3 = Angle "slide" amount (1 to 100)
                TAG5 = Match triggered when the driveable is operated with
                       the SPACEBAR.
                TAG6 = Movement speed (1 to 16384)
                       0 provides a default speed
                TAG7 = Movement "slide" amount (1 to 100)
                BOOL1= 1: Don't shake the screen when running into something
                BOOL2= 1: Trigger match tag TAG5 + 1 when the player
                          presses SPACEBAR to stop driving the sector object
                BOOL3= 1: Sector object can only be driven from a remote
                          TRIGGER_SECTOR (hitag 140)
                BOOL4= 1: Rectangular clipping - the outer 504 bounding
                          wall loop of the sector object serves as the
                          clipping box. The wall loop MUST be a 4 wall
                          rectangle. This is the only alternative to the
                          default clipping provided by the operational code.
                          This clipping is better behaved because it never
                          allows the sector object to cross sector lines.

        This ST1 provides some additional control over the behavior of
        driveable sector objects. It allows speed and angle velocities to be
        scaled, and adds momentum with TAG3 and TAG7 to make the driving
        a little more realistic. Must be placed in the center tagged
        sector of the sector object.
        EXAMPLES: EF in EXAMPLES.MAP
        SEE ALSO: SECT_OPERATIONAL (hitag 1), SECT_SO_DONT_ROTATE (hitag 45),
                  SO_LIMIT_TURN (hitag 68), SO_TURN_SPEED (hitag 55)

^11@tag148
^10HITAG 148:      WALL_DONT_STICK
                TAG4 = Point sprite at wall
        
        Point this at a wall, and nothing will stick to that wall. This keeps
        bullet holes, blood, sticky bombs, and so forth from landing on the
        wall.
        EXAMPLES: BB in EXAMPLE.MAP

^11@tag149
^10HITAG 149:      SPAWN_ITEMS
                TAG2 = Match
                TAG3 = Item to spawn:
            0/32 = Uzi
            1 = Red Key
            2 = Blue Key
            3 = Green Key
            4 = Yellow Key
            5 = Red Card
            6 = Blue Card
            7 = Green Card
            8 = Yellow Card
                        9 = Gold Skeleton Key
                        10 = Silver Skeleton Key
                        11 = Bronze Skeleton Key
                        12 = Red Skeleton Key
            20 = Uzi for Floor
            40 = Repair Kit
                        41 = Shurikens
                        42 = Sticky Mines
            43 = Rocket Launcher
            44 = Rocket Battery
            45 = Grenade Launcher
            46 = Grenades
            47 = Rail Gun
            48 = Rail Ammo
            51 = Shotgun
            52 = Shotgun Ammo
            53 = Head
            55 = Heart
                        57 = Gray Armor (can't spawn red armor)
                        58 = Portable Medkit
                        59 = Small Medkit
            60 = Chem Bomb
            61 = Flash Bomb
            62 = Nuke
            63 = Caltrops
            64 = Cookie
            65 = Heat seeker card
            66 = Cloak
            67 = Night Vision
            90 = Boy Bunny
            91 = Girl Bunny
            92 = Random Bunny
                TAG4 = Angle to throw the item
                TAG7 = Velocity 0 to 255
                       Set to 0 and the item stays in place
                TAG8 = Jump velocity 0 to 255
                BOOL1= 0: Kill the ST1 after it's triggered
                       1: Don't kill after it's triggered
                BOOL2= 1: Don't spawn another item if a sprite exists in
                          the exact position of the SPAWN_ITEMS sprite.

        This is used to spawn an item when the TAG2 match is triggered.
        Used for placing items in trash cans, dropping items from the sky,
        and any number of cool uses. Flag the ST1 as a Multiplayer only
        item (F8 menu, option 2), and the item will only spawn during a
        WangBang game.
        EXAMPLES: EB in EXAMPLE.MAP
        SEE ALSO: SPAWN_SPOT (hitag 69)

^11@tag150
^10HITAG 150:      STOP_SPOUND_SPOT
                TAG2 = Match
                TAG5 = Matched sound spot to stop

        Use this to stop a looping sound when TAG2 is triggered. TAG5 is the
        TAG2 match tag of the SOUND_SPOT (hitag 134) to be stopped.
        EXAMPLES: EB in EXAMPLE.MAP
        SEE ALSO: SOUND_SPOT (hitag 134)

^11@tag202
^10HITAG 202:      BOUND_FLOOR_BASE_OFFSET
                TAG2 = Bound Floor Number - First one is 0, then 1, 2, etc.

        All areas with this tag in them set up a new BASE OFFSET to
        move other areas to. TAG2 is the order in which they are processed.
        Consider this to be the "anchor" to which BOUND_FLOOR_OFFSET
        (hitag 203) areas are moved.
        EXAMPLES: AB, AC, FB, and FC in EXAMPLE.MAP
        SEE ALSO: BOUND_FLOOR_OFFSET (hitag 203)

^11@tag203
^10HITAG 203:      BOUND_FLOOR_OFFSET
                TAG2 = Bound Floor Number = First one is 0, then 1, 2, etc.

        All bound areas with this tag in them are moved to the last
        BOUND_FLOOR_BASE_OFFSET sprite. "Bound" areas means all sectors
        that are either directly or indirectly attached to the sector
        with BOUND_FLOOR_OFFSET in it. This allows you to build stacked
        sectors separately and let Shadow Warrior overlap them for you.
        Useful mainly for room-over-room and special dive sector cases.
        If a sector object is part of a bound floor group, it can have
        a matching 504 wall loop in the bound floor base group, which
        will move and behave exactly like the sector object. This is
        incredibly useful for a variety of effects, like the bottom of a
        boat in the underwater sector stays with the boat in the upper
        sector, and so on.
        EXAMPLES: AD, AE, FE, and FF in EXAMPLE.MAP
        SEE ALSO: BOUND_FLOOR_BASE_OFFSET (hitag 202)

^11@tag500
^10HITAGs 500-596: SECT_SO_BOUNDING

        Bounding sprites for sector objects. Every sector object needs
        bounding sprites, one in the upper left corner (BOUND_SO_UPPER)
        and one in the lower right corner (BOUND_SO_LOWER). These two
        sprites form the opposing points of an imaginary rectangle that
        must encompass the entire sector object, plus any sprites you
        want to move with it (like a gun barrel.) You are allowed to
        have a maximum of 20 sector objects in a level. The
        BOUND_SO_UPPER sprite hitag of a sector object is calculated as
        500 + (5 * sector object num). The BOUND_SO_LOWER sprite hitag of
        a sector object is calculated as 501 + (5 * sector object num).
        So, sector object 0 uses BOUND_SO_UPPER 500 and BOUND_SO_LOWER
        501. Sector object 1 uses BOUND_SO_UPPER 505 and BOUND_SO_LOWER
        506. This goes up in increments of 5 all the way to sector
        object 19, which uses BOUND_SO_UPPER 595 and BOUND_SO_LOWER 596.
        EXAMPLES: EC, ED, EE, EF, FA, FB, and FC in EXAMPLE.MAP

^11@tag1000
^10HITAG 1000:     MIRROR_CAM
                TAG2 = Match tag
                TAG4 = Angle of camera
                TAG6 = Camera maximum turn angle from 0-2048. This is the angle
                       from center that the camera will rotate back and forth.
                       (512 = 90 degrees each way for 180 degrees range
                       of motion)
                TAG7 = Camera look up/down amount. Valid values (5-195).
                BOOL1= 0: Draw monitor to look like a magic view into another
                          place, looks more like reality.
                       1: Draw monitor using draw to tile. This makes it look
                          like a TV screen.
                BOOL2= 0: Don't rotate the camera.
                       1: Rotate the camera by angle specified in TAG6 from
                          current camera angle.
                BOOL3= 0: Negative turn direction
                       1: Positive turn direction
                BOOL11=When BOOL1 is set to "1":
                       0: Do normal TV camera view
                       1: Cycle through all players' views in 5 second
                          increments on this monitor.

        The camera's view can be displayed in a monitor built using a mirror.
        Tag the mirror wall with lotag 306 and a hitag equal to the
        MIRROR_CAM TAG2 match tag. NOTE: Mirrors MUST be built using one way
        walls, not masked walls or they won't operate. A TV monitor requires
        a TV monitor sprite (picnums 3830-3837) with a hitag equal to the
        MIRROR_CAM TAG2 match tag. The TV monitor sprite must be placed in
        front of a mirror.
        EXAMPLES: GB and GC in EXAMPLE.MAP

^11@tag1002
^10HITAG 1002:     AMBIENT_SOUND
                TAG2 = Ambient sound number
    
        Plays an ambient sound. Look at the ambient sound index in
        SWSOUNDS.TXT to find the ambient sound number you want.
        EXAMPLES: EC and ED in EXAMPLE.MAP
        SEE ALSO: SOUND_SPOT (hitag 134)

^11@tag1005
^10HITAG 1005:     ECHO_SPOT
                TAG2 = Reverb setting from 100 - 200
                TAG4 = Radius that the reverb effect can be heard

        Causes all sounds in the area around the ECHO_SPOT to reverb by the
        amount set in TAG2. Note that there is no reverb available when
        using a Soundscape.
        EXAMPLES: $YAMATO.MAP, plus many other game maps

^11@tag1006
^10HITAG 1006:     DRIP_GENERATOR  
                TAG2 = Delay in seconds. If 0, then it uses internally
                       programmed delays (quite fast), otherwise it drips
                       every TAG2 seconds.
                BOOL1= Drip type
                       0: Blood drips
                       1: Water drips    
                BOOL2= 0: Drips
                       1: No drips, do a bubble instead

        Used to create a dripping or bubbling spot. The Z height of the ST1
        is important, because that's the height where the drip or bubble will
        spawn.
        EXAMPLES: AA in EXAMPLE.MAP

@end

^P page 6-7
^3----------------------------------------------
^3Shadow Warrior Digital And Ambient Sound Index
^3Compiled And Edited By Keith Schuler
^3(c) 1997 3D Realms Entertainment
^3----------------------------------------------

This document lists all the sound effects used in Shadow Warrior, and then
some. You can use this as a reference for digital sound entry numbers to
use in order to generate different sounds in your levels. This document
contains two parts. The first part is the digital sound list, which
provides entry numbers to be used with the SOUND_SPOT (hitag 134) ST1.
The second part provides entry numbers to be used with the AMBIENT_SOUND
(hitag 1002) ST1.

Here are the other documents included with this package:

ADVANCED.TXT - Brief explanations of room-over-room, sector objects, and
other advanced Shadow Warrior mapping topics.
EDITART.TXT  - Instructions and reference for using the EDITART program.
EXAMPLE.TXT  - Documentation to accompany EXAMPLE.MAP, which includes
demonstrations of almost all of Shadow Warrior's map functionality.
INSTALL.TXT  - How to get the necessary utilities off the Shadow Warrior CD
so you can start creating your own art and levels
SLABSPRI.TXT - Instructions and reference for using the SLABSPRI program.
SWSOUNDS.TXT - An index of the sound effects and ambient sounds.
SPRITAGS.TXT - Sprite tagging reference. Your guide to all the special
sprites in Shadow Warrior and how to use them.
SWBUILD.TXT  - A tutorial and reference guide to using the BUILD editor.
WALLTAGS.TXT - Wall and sector tagging reference. These are all the wall and
sector tags used in Shadow Warrior.
^3-----------------------------------------------------------------------------

^3 ---------------------------
^3 1.      Digital Sound Index
^3 ---------------------------

This section is arranged in four columns. The first column is the actual
filename of the sound .VOC as it appears in the .GRP file. The second
column lists an identifying label that the programmers used, but we left
it in the list to help you identify the sound more easily. The third
column is the actual sound entry number. This is the number you use in
TAG4, TAG5, or TAG6 of the SOUND_SPOT (hitag 134) ST1. You can also use this
number in the lotag of a wall that is hitagged TAG_WALL_PLAY_SOUND
(walltag 900). Do NOT use these numbers with AMBIENT_SOUND (hitag 1002)
ST1's! It won't work properly. Sound numbers to use with AMBIENT_SOUND are
listed in the second part of this document. The fourth and final column might
contain a descriptive comment.

NOTE: A lot of these sounds are not used in the game. Some that I am not
      sure were used I marked with a (?). If you can't find a .VOC file
      listed here in the .GRP file, then feel free to use your own custom
      sound by copying it into the game directory using the same
      filename. You can then use that entry's sound number to hear your
      custom sound in the game.
      
^3+--------------+-----------------------+-------+-----------------+
^3|FILENAME      |IDENTITY               |ENTRY  |COMMENTS         |
^3+--------------+-----------------------+-------+-----------------+

"NULL.VOC"      DIGI_NULL               0       Don't change this

"SWRDSTR1.VOC"  DIGI_SWORDSWOOSH        1       Sword

"THROW.VOC"     DIGI_STAR               2       Shuriken sounds
"STRCLNK.VOC"   DIGI_STARCLINK          3
"STRWIZ.VOC"    DIGI_STARWIZ            4

"UZIFIRE1.VOC"  DIGI_UZIFIRE            5       Uzi sounds
"RICH1.VOC"     DIGI_RICHOCHET1         6
"RICH2.VOC"     DIGI_RICHOCHET2         7
"RMVCLIP.VOC"   DIGI_REMOVECLIP         8
"RPLCLIP.VOC"   DIGI_REPLACECLIP        9

"SHELL.VOC"     DIGI_SHELL              10      Spent shell

"RIOTFIR1.VOC"  DIGI_RIOTFIRE           11      Riot shotgun sounds
"SHOTGUN.VOC"   DIGI_RIOTFIRE2          12
"RIOTRLD.VOC"   DIGI_RIOTRELOAD         13
"EXPMED.VOC"    DIGI_BOLTEXPLODE        14
"RIOTWIZ.VOC"   DIGI_BOLTWIZ            15

"40MMFIR2.VOC"  DIGI_30MMFIRE           16      Grenade launcher
"RIOTRLD.VOC"   DIGI_30MMRELOAD         17
"40MMEXP2.VOC"  DIGI_30MMEXPLODE        18
"RIOTWIZ.VOC"   DIGI_30MMWIZ            19

"GHFIR1.VOC"    DIGI_HEADFIRE           20      Guardian head
"GHWIZ.VOC"     DIGI_HEADSHOTWIZ        21
"EXPSML.VOC"    DIGI_HEADSHOTHIT        22

"THROW.VOC"     DIGI_MINETHROW          23      Sticky mines
"PHITGRND.VOC"  DIGI_MINEBOUNCE         24
"EXPLRG.VOC"    DIGI_MINEBLOW           25
"STSCAN2.VOC"   DIGI_MINEBEEP           26

"HBLOOP1.VOC"   DIGI_HEARTBEAT          27      Heart attack
"HSQUEEZ1.VOC"  DIGI_HEARTFIRE          28
"HRTWIZ.VOC"    DIGI_HEARTWIZ           29

"RIOTFIR1.VOC"  DIGI_MISSLFIRE          30      Missile launcher
"EXPMED.VOC"    DIGI_MISSLEXP           31

"RFWIZ.VOC"     DIGI_RFWIZ              32      Ring of Fire

"NAPFIRE.VOC"   DIGI_NAPFIRE            33      Napalm
"NAPTWIZ.VOC"   DIGI_NAPWIZ             34
"NAPPUFF.VOC"   DIGI_NAPPUFF            35

"MMFIRE.VOC"    DIGI_MIRVFIRE           36      Magic mirv spell
"MMWIZ.VOC"     DIGI_MIRVWIZ            37

"SPRLFIRE.VOC"  DIGI_SPIRALFIRE         38      Spiral spell (?)
"SPRLWIZ.VOC"   DIGI_SPIRALWIZ          39

"MAGIC1.VOC"    DIGI_MAGIC1             40      General magic sounds
"MAGIC2.VOC"    DIGI_MAGIC2             41
"MAGIC3.VOC"    DIGI_MAGIC3             42
"MAGIC4.VOC"    DIGI_MAGIC4             43
"MAGIC5.VOC"    DIGI_MAGIC5             44
"MAGIC6.VOC"    DIGI_MAGIC6             45
"MAGIC7.VOC"    DIGI_MAGIC7             46

"SWSPELL.VOC"   DIGI_SWCLOAKUNCLOAK     47      Cloaking bomb

"DHVOMIT.VOC"   DIGI_DHVOMIT            48      Vomiting dead head
"DHCLUNK.VOC"   DIGI_DHCLUNK            49
"DHSQSH.VOC"    DIGI_DHSQUISH           50

"LAVAHIT.VOC"   DIGI_PROJECTILELAVAHIT  51      Weapon fire hits lava
"STSPL01.VOC"   DIGI_PROJECTILEWATERHIT 52      or water

"KEY.VOC"       DIGI_KEY                53      Pick up item sounds
"ITEM5A.VOC"    DIGI_ITEM               54
"ITEMBIG2.VOC"  DIGI_BIGITEM            55

"BODY9.VOC"     DIGI_BODYFALL1          56      Pain and death sounds
"PHITGRND.VOC"  DIGI_HITGROUND          57
"BODY2.VOC"     DIGI_BODYSQUISH1        58
"BURN1.VOC"     DIGI_BODYBURN           59
"BURNSCRM.VOC"  DIGI_BODYBURNSCREAM     60
"BODY3.VOC"     DIGI_BODYCRUSHED1       61
"BODY4.VOC"     DIGI_BODYHACKED1        62
"BURN2.VOC"     DIGI_BODYSINGED         63
"DROWN1.VOC"    DIGI_DROWN              64
"SCREAM1.VOC"   DIGI_SCREAM1            65
"SCREAM2.VOC"   DIGI_SCREAM2            66
"SCREAM3.VOC"   DIGI_SCREAM3            67
"HIT1.VOC"      DIGI_HIT1               68
"ELECTRC1.VOC"  DIGI_ELECTRICUTE1       69
"SWDIE02.VOC"   DIGI_REMOVEME           70
"IMPALE1.VOC"   DIGI_IMPALED            71
"OOF1.VOC"      DIGI_OOF1               72

"BODY1.VOC"     DIGI_ACTORBODYFALL1     73      Player sounds that actors
"HITGRND.VOC"   DIGI_ACTORHITGROUND     74      also use

"COLEXP.VOC"    DIGI_COOLIEEXPLODE      75      Coolie
"COLSCRM.VOC"   DIGI_COOLIESCREAM       76
"COLALRT.VOC"   DIGI_COOLIEALERT        77
"COLAMB.VOC"    DIGI_COOLIEAMBIENT      78
"COLPAIN.VOC"   DIGI_COOLIEPAIN         79

"CGMAT.VOC"     DIGI_CGMATERIALIZE      80      Coolie Ghost
"CGALRT.VOC"    DIGI_CGALERT            81
"CGWHACK.VOC"   DIGI_CGTHIGHBONE        82
"CGAMB.VOC"     DIGI_CGAMBIENT          83
"CGPAIN.VOC"    DIGI_CGPAIN             84
"CGSHOOT.VOC"   DIGI_CGMAGIC            85
"CGHIT.VOC"     DIGI_CGMAGICHIT         86
"CGSCRM.VOC"    DIGI_CGSCREAM           87

"NINAMB.VOC"    DIGI_NINJAAMBIENT       88      Evil Ninja
"NINSTAR.VOC"   DIGI_NINJASTAR          89
"NINPAIN.VOC"   DIGI_NINJAPAIN          90
"NINSCRM.VOC"   DIGI_NINJASCREAM        91
"NINALRT.VOC"   DIGI_NINJAALERT         92
"NINSHOOT.VOC"  DIGI_NINJAUZIATTACK     93
"RIOTFIR1.VOC"  DIGI_NINJARIOTATTACK    94

"RIPAMB.VOC"    DIGI_RIPPERAMBIENT      95      Ripper
"RIPALRT.VOC"   DIGI_RIPPERALERT        96
"RIPATCK.VOC"   DIGI_RIPPERATTACK       97
"RIPPAIN.VOC"   DIGI_RIPPERPAIN         98
"RIPSCRM.VOC"   DIGI_RIPPERSCREAM       99
"RIPHRT.VOC"    DIGI_RIPPERHEARTOUT     100

"GRDAMB.VOC"    DIGI_GRDAMBIENT         101     Guardian
"GRDALRT.VOC"   DIGI_GRDALERT           102
"GRDPAIN.VOC"   DIGI_GRDPAIN            103
"GRDSCRM.VOC"   DIGI_GRDSCREAM          104
"GRDFIR.VOC"    DIGI_GRDFIREBALL        105
"GRDAXE.VOC"    DIGI_GRDSWINGAXE        106
"GRDAXHT.VOC"   DIGI_GRDAXEHIT          107

"SPAMB.VOC"     DIGI_SPAMBIENT          108     Skeletor Priest (?)
"SPALRT.VOC"    DIGI_SPALERT            109
"SPPAIN.VOC"    DIGI_SPPAIN             110
"SPSCRM.VOC"    DIGI_SPSCREAM           111
"SPBLADE.VOC"   DIGI_SPBLADE            112
"SPELEC.VOC"    DIGI_SPELEC             113
"SPTLPRT.VOC"   DIGI_SPTELEPORT         114

"AHAMB.VOC"     DIGI_AHAMBIENT          115     Accursed Head
"AHSCRM.VOC"    DIGI_AHSCREAM           116
"AHEXP.VOC"     DIGI_AHEXPLODE          117
"AHSHWSH.VOC"   DIGI_AHSWOOSH           118

"HBUZZ.VOC"     DIGI_HORNETBUZZ         119      Hornet
"HSTING.VOC"    DIGI_HORNETSTING        120
"HPAIN.VOC"     DIGI_HORNETPAIN         121
"HDEATH.VOC"    DIGI_HORNETDEATH        122

"SGAMB.VOC"     DIGI_SERPAMBIENT        123      Serpent Boss
"SGALRT.VOC"    DIGI_SERPALERT          124
"SGPAIN.VOC"    DIGI_SERPPAIN           125
"SGSCRM.VOC"    DIGI_SERPSCREAM         126
"SGDETH.VOC"    DIGI_SERPDEATHEXPLODE   127
"SGSWORD.VOC"   DIGI_SERPSWORDATTACK    128
"SGMAGIC.VOC"   DIGI_SERPMAGICLAUNCH    129
"SGHEADS.VOC"   DIGI_SERPSUMMONHEADS    130
"SGTAUNT.VOC"   DIGI_SERPTAUNTYOU       131

"LVAMB.VOC"     DIGI_LAVABOSSAMBIENT    132      Lava Boss (?)
"LVSWIM.VOC"    DIGI_LAVABOSSSWIM       133
"LVRISE.VOC"    DIGI_LAVABOSSRISE       134
"LVALRT.VOC"    DIGI_LAVABOSSALERT      135
"LVFLAME.VOC"   DIGI_LAVABOSSFLAME      136
"LVMETEOR.VOC"  DIGI_LAVABOSSMETEOR     137
"LVMETEXP.VOC"  DIGI_LAVABOSSMETEXP     138
"LVPAIN.VOC"    DIGI_LAVABOSSPAIN       139
"LVSIZZLE.VOC"  DIGI_LAVABOSSSIZZLE     140
"LVEXPL.VOC"    DIGI_LAVABOSSEXPLODE    141

"BTSTRT.VOC"    DIGI_BOATSTART          142      Motor Boat
"BTRUN01.VOC"   DIGI_BOATRUN            143
"BTSTOP.VOC"    DIGI_BOATSTOP           144
"BTFIRE.VOC"    DIGI_BOATFIRE           145

"TNKSTRT.VOC"   DIGI_TANKSTART          146      Army Tank
"TNKRUN.VOC"    DIGI_TANKRUN            147
"TNKSTOP.VOC"   DIGI_TANKSTOP           148
"TNKIDLE.VOC"   DIGI_TANKIDLE           149
"TNKFIRE.VOC"   DIGI_TANKFIRE           150

"TRUKRUN.VOC"   DIGI_TRUKRUN            151      Army Truck (?)
"TRUKIDLE.VOC"  DIGI_TRUKIDLE           152

"SUBRUN.VOC"    DIGI_SUBRUN             153      Submarine (?)
"SUBIDLE.VOC"   DIGI_SUBIDLE            154
"SUBDOOR.VOC"   DIGI_SUBDOOR            155

"BMBFLY.VOC"    DIGI_BOMBRFLYING        156      Bomber Plane (?)
"BMBDROP.VOC"   DIGI_BOMBRDROPBOMB      157

"BUBBLE.VOC"    DIGI_BUBBLES            158      Bubbles

"CHAIN.VOC"     DIGI_CHAIN              159      (?)

"CHNDOOR.VOC"   DIGI_CHAINDOOR          160      Chain door

"CRCKT2.VOC"    DIGI_CRICKETS           161      Crickets

"DRWOODO.VOC"   DIGI_WOODDOOROPEN       162      Door sounds
"DRMETO.VOC"    DIGI_METALDOOROPEN      164
"DRMETC.VOC"    DIGI_METALDOORCLOSE     165
"DRSLDO.VOC"    DIGI_SLIDEDOOROPEN      166
"DRSLDC.VOC"    DIGI_SLIDEDOORCLOSE     167
"DRSTNO.VOC"    DIGI_STONEDOOROPEN      168
"DRSTNC.VOC"    DIGI_STONEDOORCLOSE     169
"DRSQKO.VOC"    DIGI_SQUEAKYDOOROPEN    170
"DRSQKC.VOC"    DIGI_SQUEAKYDOORCLOSE   171

"DRILL.VOC"     DIGI_DRILL              172      Giant drill

"CAVE1.VOC"     DIGI_CAVEDRIP1          173      Water dripping in cave
"CAVE2.VOC"     DIGI_CAVEDRIP2          174
"DRIP.VOC"      DIGI_DRIP               175

"WTRFAL1.VOC"   DIGI_WATERFALL1         176      Waterfall sound
"WTRFAL2.VOC"   DIGI_WATERFALL2         177      (?)

"WTRFLW1.VOC"   DIGI_WATERFLOW1         178      Water flowing
"WTRFLW2.VOC"   DIGI_WATERFLOW2         179      (?)

"ELEV1.VOC"     DIGI_ELEVATOR           180      Elevator sound

"EXPSML.VOC"    DIGI_SMALLEXP           181      Explosion sounds
"EXPMED.VOC"    DIGI_MEDIUMEXP          182
"EXPLRG.VOC"    DIGI_LARGEEXP           183
"BIGEXP.VOC"    DIGI_HUGEEXP            184

"FIRE1.VOC"     DIGI_FIRE1              185      Crackling fire
"FIRE2.VOC"     DIGI_FIRE2              186      Powerful fire

"FBALL1.VOC"    DIGI_FIREBALL1          187      Fireball trap
"FIREBALL1.VOC" DIGI_FIREBALL2          188

"GEAR1.VOC"     DIGI_GEAR1              189      Gear turning

"GONG.VOC"      DIGI_GONG               190      Gong

"LAVAFLW1.VOC"  DIGI_LAVAFLOW1          191      Lava flowing ambience

"MACHN1.VOC"    DIGI_MACHINE1           192      Generic machine (?)

"MUD1.VOC"      DIGI_MUBBUBBLES1        193      Mud or lava bubbles

"QUAKE1.VOC"    DIGI_EARTHQUAKE         194      Earthquake sound

"SEWER1.VOC"    DIGI_SEWERFLOW1         195      Sewer noise (?)

"SPLASH1.VOC"   DIGI_SPLASH1            196      Generic splash

"STEAM1.VOC"    DIGI_STEAM1             197      Steam
"VOLSTM1.VOC"   DIGI_VOLCANOSTEAM1      198      Volcanic Steam (?)

"STMPR.VOC"     DIGI_STOMPER            199      (?)

"SWAMP1.VOC"    DIGI_SWAMP              200      Swamp ambience

"SWITCH1.VOC"   DIGI_REGULARSWITCH      201      Switch sounds
"SWITCH2.VOC"   DIGI_BIGSWITCH          202
"SWITCH3.VOC"   DIGI_STONESWITCH        203
"SWITCH4.VOC"   DIGI_GLASSSWITCH        204
"SWITCH5.VOC"   DIGI_HUGESWITCH         205

"THUNDR.VOC"    DIGI_THUNDER            206      Thunder ambience

"TELPORT.VOC"   DIGI_TELEPORT           207      Teleporter

"UNDRWTR.VOC"   DIGI_UNDERWATER         208      Underwater ambience

"UNLOCK.VOC"    DIGI_UNLOCK             209      Key unlock

"VALVE.VOC"     DIGI_SQUEAKYVALVE       210

"VOID1.VOC"     DIGI_VOID1              211      Various weird ambience
"VOID2.VOC"     DIGI_VOID2              212
"VOID3.VOC"     DIGI_VOID3              213
"VOID4.VOC"     DIGI_VOID4              214
"VOID5.VOC"     DIGI_VOID5              215

"ERUPT.VOC"     DIGI_ERUPTION           216      Eruption ambience

"VOLPRJCT.VOC"  DIGI_VOLCANOPROJECTILE  217     (?)

"WIND1.VOC"     DIGI_LIGHTWIND          218      Wind ambience
"WIND2.VOC"     DIGI_STRONGWIND         219

"WOODBRK.VOC"   DIGI_BREAKINGWOOD       220      Breakage sounds (?)
"STONEBRK.VOC"  DIGI_BREAKSTONES        221

"ENGROOM1.VOC"  DIGI_ENGROOM1           222      Various engine ambience
"ENGROOM2.VOC"  DIGI_ENGROOM2           223
"ENGROOM3.VOC"  DIGI_ENGROOM3           224
"ENGROOM4.VOC"  DIGI_ENGROOM4           225
"ENGROOM5.VOC"  DIGI_ENGROOM5           226

"GLASS3.VOC"    DIGI_BREAKGLASS         227      Breaking glass

"MUSSTING.VOC"  DIGI_MUSSTING           228      Musical stinger (?)

"HELI.VOC"      DIGI_HELI               229      Helicopter (?)

"BIGHART.VOC"   DIGI_BIGHART            230      Heart ambience (?)

"WIND4.VOC"     DIGI_WIND4              231      More wind

"SPOOKY1.VOC"   DIGI_SPOOKY1            232      Spooky sound (?)

"DRILL1.VOC"    DIGI_DRILL1             233      Another drill (?)

"JET.VOC"       DIGI_JET                234      Jet ambience

"DRUMCHNT.VOC"  DIGI_DRUMCHANT          235      Drum chanting

"FLY.VOC"       DIGI_BUZZZ              236      Chopstick sounds
"UZICLK.VOC"    DIGI_CHOP_CLICK         237

"STICKY2R.VOC"  DIGI_SWORD_UP           238      Weapon up sounds
"UZI1R.VOC"     DIGI_UZI_UP             239
"SHOTG1R.VOC"   DIGI_SHOTGUN_UP         240
"BOLT1R.VOC"    DIGI_ROCKET_UP          241
"BOLT1R.VOC"    DIGI_GRENADE_UP         242
"BOLT1R.VOC"    DIGI_RAIL_UP            243
"STICKY1R.VOC"  DIGI_MINE_UP            244

NULL            DIGI_FIRSTPLAYERVOICE   245      Don't change this
"BADMAN04.VOC"  DIGI_TAUNTAI1           246      Various player
"COMEGET2.VOC"  DIGI_TAUNTAI2           247      taunts when killing
"GHOP07.VOC"    DIGI_TAUNTAI3           248      bad guys
"GOODDAY4.VOC"  DIGI_TAUNTAI4           249
"KILLU05.VOC"   DIGI_TAUNTAI5           250
"NATURAL4.VOC"  DIGI_TAUNTAI6           251

"NOHONOR6.VOC"  DIGI_TAUNTAI7           252
"SAYON09.VOC"   DIGI_TAUNTAI8           253
"TAKSAN1.VOC"   DIGI_TAUNTAI9           254
"SNATCH01.VOC"  DIGI_TAUNTAI10          255

"CHOTO7.VOC"    DIGI_PLAYERPAIN1        256      Player pain sounds
"SWPAIN05.VOC"  DIGI_PLAYERPAIN2        257
"SWPAIN03.VOC"  DIGI_PLAYERPAIN3        258
"SWPAIN07.VOC"  DIGI_PLAYERPAIN4        259
"SWPAIN22.VOC"  DIGI_PLAYERPAIN5        260

"SWYELL03.VOC"  DIGI_PLAYERYELL1        261      Player yelling
"SWYELL05.VOC"  DIGI_PLAYERYELL2        262
"SWYELL06.VOC"  DIGI_PLAYERYELL3        263

"GRUNT06.VOC"   DIGI_SEARCHWALL         264      Grunt searching wall

"NOWAY1.VOC"    DIGI_NOURINAL           265      "No way  water cold"

"SWDIE02.VOC"   DIGI_FALLSCREAM         266      Player scream
"AHSO5.VOC"     DIGI_GOTITEM1           267      "Ahh  so"
NULL            DIGI_LASTPLAYERVOICE    268      Don't change this

"HSHOT1.VOC"    DIGI_RAILFIRE           269      Rail gun sounds
"RAIL2.VOC"     DIGI_RAILREADY          270
"RAILUP09.VOC"  DIGI_RAILPWRUP          271

"HBOMB2.VOC"    DIGI_NUCLEAREXP         272      Nuke sounds
"STANDBY.VOC"   DIGI_NUKESTDBY          273
"CDOWN.VOC"     DIGI_NUKECDOWN          274
"SYSREAD.VOC"   DIGI_NUKEREADY          275

"HISS1.VOC"     DIGI_CHEMGAS            276      ChemBomb
"CHBNCE1.VOC"   DIGI_CHEMBOUNCE         277
"THROW.VOC"     DIGI_THROW              278
"PULL.VOC"      DIGI_PULL               279

"STSCAN2.VOC"   DIGI_MINEARM            280      Other weapon/item sounds
"HBDOWN1.VOC"   DIGI_HEARTDOWN          281
"TOOLUSE1.VOC"  DIGI_TOOLBOX            282
"GASPOP.VOC"    DIGI_GASPOP             283
"40MMBNCE.VOC"  DIGI_40MMBNCE           284

"BURGALRM.VOC"  DIGI_BURGLARALARM       285      Various
"CARALRM2.VOC"  DIGI_CARALARM           286
"CAOFF1.VOC"    DIGI_CARALARMOFF        287
"TACK1.VOC"     DIGI_CALTROPS           288
"NVON3.VOC"     DIGI_NIGHTON            289
"NVOFF2.VOC"    DIGI_NIGHTOFF           290
"SGSH01.VOC"    DIGI_SHOTSHELLSPENT     291
"SKID3.VOC"     DIGI_BUSSKID            292
"CRASH4.VOC"    DIGI_BUSCRASH           293
"BUS1.VOC"      DIGI_BUSENGINE          294
"BIMP01.VOC"    DIGI_ARMORHIT           295

"ASIREN1.VOC"   DIGI_ASIREN1            296      Traffic ambience
"FIRETRK1.VOC"  DIGI_FIRETRK1           297
"TRAFFIC1.VOC"  DIGI_TRAFFIC1           298
"TRAFFIC2.VOC"  DIGI_TRAFFIC2           299
"TRAFFIC3.VOC"  DIGI_TRAFFIC3           300
"TRAFFIC4.VOC"  DIGI_TRAFFIC4           301
"TRAFFIC5.VOC"  DIGI_TRAFFIC5           302
"TRAFFIC6.VOC"  DIGI_TRAFFIC6           303
"HELI1.VOC"     DIGI_HELI1              304
"JET1.VOC"      DIGI_JET1               305
"MOTO1.VOC"     DIGI_MOTO1              306
"MOTO2.VOC"     DIGI_MOTO2              307
"NEON1.VOC"     DIGI_NEON1              308
"SUBWAY1.VOC"   DIGI_SUBWAY             309
"TRAINS01.VOC"  DIGI_TRAIN1             310

"COIN.VOC"      DIGI_COINS              311
"SWRDSMK1.VOC"  DIGI_SWORDCLANK         312

"RIP2AMB.VOC"   DIGI_RIPPER2AMBIENT     313      Big Ripper
"RIP2ALRT.VOC"  DIGI_RIPPER2ALERT       314
"RIP2ATCK.VOC"  DIGI_RIPPER2ATTACK      315
"RIP2PAIN.VOC"  DIGI_RIPPER2PAIN        316
"RIP2SCRM.VOC"  DIGI_RIPPER2SCREAM      317
"RIP2HRT.VOC"   DIGI_RIPPER2HEARTOUT    318

"M60.VOC"       DIGI_M60                319      Enemy M60 fire

"SUMSCRM.VOC"   DIGI_SUMOSCREAM         320      Sumo Boss sounds
"SUMALRT.VOC"   DIGI_SUMOALERT          321
"SUMAMB.VOC"    DIGI_SUMOAMBIENT        322
"SUMPAIN.VOC"   DIGI_SUMOPAIN           323

"RAMLOCK.VOC"   DIGI_RAMUNLOCK          324      Unlocking sounds
"CARDLOCK.VOC"  DIGI_CARDUNLOCK         325

"ACS10.VOC"     DIGI_ANCIENTSECRET      326      More player voices
"AMDRIV01.VOC"  DIGI_AMERICANDRIVER     327
"BABOON03.VOC"  DIGI_DRIVELIKEBABOON    328
"BBURN04.VOC"   DIGI_BURNBABY           329
"BIGWPN01.VOC"  DIGI_LIKEBIGWEAPONS     330
"CBUNG01.VOC"   DIGI_COWABUNGA          331
"CHARAD09.VOC"  DIGI_NOCHARADE          332
"DTIME.VOC"     DIGI_TIMETODIE          333
"EAT02.VOC"     DIGI_EATTHIS            334
"FCRACK01.VOC"  DIGI_FIRECRACKERUPASS   335
"HCOW03.VOC"    DIGI_HOLYCOW            336
"HCOW06.VOC"    DIGI_HOLYPEICESOFCOW    337
"HSHIT03.VOC"   DIGI_HOLYSHIT           338
"HSHIT04.VOC"   DIGI_HOLYPEICESOFSHIT   339
"IHOPE01.VOC"   DIGI_PAYINGATTENTION    340
"ILIKE01.VOC"   DIGI_EVERYBODYDEAD      341
"KUNGFU06.VOC"  DIGI_KUNGFU             342
"LMOVE01.VOC"   DIGI_HOWYOULIKEMOVE     343
"LWANG05.VOC"   DIGI_NOMESSWITHWANG     344
"RAW01.VOC"     DIGI_RAWREVENGE         345
"STUPID01.VOC"  DIGI_YOULOOKSTUPID      346
"TDICK02.VOC"   DIGI_TINYDICK           347
"TOURN01.VOC"   DIGI_NOTOURNAMENT       348
"WWANG11.VOC"   DIGI_WHOWANTSWANG       349
"YAK02.VOC"     DIGI_MOVELIKEYAK        350
"REFLEX08.VOC"  DIGI_ALLINREFLEXES      351
"EVADE01.VOC"   DIGI_EVADEFOREVER       352
"MFLY03.VOC"    DIGI_MRFLY              353
"SHISEI03.VOC"  DIGI_SHISEISI           354
"FWORKS01.VOC"  DIGI_LIKEFIREWORKS      355
"HIRO03.VOC"    DIGI_LIKEHIROSHIMA      356
"NAGA06.VOC"    DIGI_LIKENAGASAKI       357
"PEARL03.VOC"   DIGI_LIKEPEARL          358
"IAM01.VOC"     DIGI_IAMSHADOW          359
"LIKNUK01.VOC"  DIGI_ILIKENUKES         360
"LIKSRD01.VOC"  DIGI_ILIKESWORD         361
"LIKSHK02.VOC"  DIGI_ILIKESHURIKEN      362
"LUCK06.VOC"    DIGI_BADLUCK            363
"MCHAN01.VOC"   DIGI_NOMOVIEMRCHAN      364
"RCHAN13.VOC"   DIGI_REALLIFEMRCHAN     365
"MUSIC03.VOC"   DIGI_NOLIKEMUSIC        366
"NODIFF07.VOC"  DIGI_NODIFFERENCE       367
"NOFEAR01.VOC"  DIGI_NOFEAR             368
"NOPAIN.VOC"    DIGI_NOPAIN             369
"REPMAN15.VOC"  DIGI_NOREPAIRMAN        370
"SOB15.VOC"     DIGI_SONOFABITCH        371
"WEAK03.VOC"    DIGI_PAINFORWEAK        372
"SPEED04.VOC"   DIGI_GOSPEEDY           373
"STIFF01.VOC"   DIGI_GETTINGSTIFF       374
"TOMB05.VOC"    DIGI_TOMBRAIDER         375
"TSTICK01.VOC"  DIGI_STICKYGOTU1        376
"TSTICK05.VOC"  DIGI_STICKYGOTU2        377
"TSTICK07.VOC"  DIGI_STICKYGOTU3        378
"TSTICK10.VOC"  DIGI_STICKYGOTU4        379
"TSWORD05.VOC"  DIGI_SWORDGOTU1         380
"TSWORD08.VOC"  DIGI_SWORDGOTU2         381
"TSWORD01.VOC"  DIGI_SWORDGOTU3         382
"SWYELL22.VOC"  DIGI_HURTBAD1           383
"SWYELL14.VOC"  DIGI_HURTBAD2           384
"SWYELL23.VOC"  DIGI_HURTBAD3           385
"SWYELL16.VOC"  DIGI_HURTBAD4           386
"SWYELL13.VOC"  DIGI_HURTBAD5           387

"TGSCRM.VOC"    DIGI_TOILETGIRLSCREAM   388      Girl on the toilet
"TGALRT.VOC"    DIGI_TOILETGIRLALERT    389
"TGAMB.VOC"     DIGI_TOILETGIRLAMBIENT  390
"TGPAIN.VOC"    DIGI_TOILETGIRLPAIN     391
"TGTNT1.VOC"    DIGI_TOILETGIRLTAUNT1   392
"TGTNT2.VOC"    DIGI_TOILETGIRLTAUNT2   393

"SUMOFART.VOC"  DIGI_SUMOFART           394      Sumo fart attack

"GIBS04.VOC"    DIGI_GIBS1              395      Gib splats
"GIBS05.VOC"    DIGI_GIBS2              396

"BIRDS01.VOC"   DIGI_BIRDS1             397      Bird ambience
"BIRDS02.VOC"   DIGI_BIRDS2             398
"TOILET01.VOC"  DIGI_TOILET             399      Toilet flush
"FLIDLE.VOC"    DIGI_FORKLIFTIDLE       400      Forklift driving
"FLRUN01.VOC"   DIGI_FORKLIFTRUN        401
"TOYCAR03.VOC"  DIGI_TOYCAR             402
"PRESS03.VOC"   DIGI_UZIMATIC           403
"COMPON01.VOC"  DIGI_COMPUTERPOWER      404
"TURBON01.VOC"  DIGI_GENERATORON        405
"TURBRN01.VOC"  DIGI_GENERATORRUN       406
"BIGDRL03.VOC"  DIGI_BIGDRILL           407
"FLUOR01.VOC"   DIGI_FLUORLIGHT         408
"AMOEBA03.VOC"  DIGI_AMOEBA             409
"BODY6.VOC"     DIGI_BODYFALL2          410
"GIBS01.VOC"    DIGI_GIBS3              411
"CHOK01.VOC"    DIGI_NINJACHOKE         412

"TRAIN3.VOC"    DIGI_TRAIN3             413
"TRAINR02.VOC"  DIGI_TRAINR02           414
"TRAIN8.VOC"    DIGI_TRAIN8             415
"TCLID01.VOC"   DIGI_TRASHLID           416

"ACCU01.VOC"    DIGI_GETMEDKIT          417      Medkit player voices
"AHH03.VOC"     DIGI_AHH                418

"PALARM1.VOC"   DIGI_PALARM             419      Pachinko sounds
"PFLIP4.VOC"    DIGI_PFLIP              420
"PROLL1.VOC"    DIGI_PROLL1             421
"PROLL2.VOC"    DIGI_PROLL2             422
"PROLL3.VOC"    DIGI_PROLL3             423

"RABATK1.VOC"   DIGI_BUNNYATTACK        424      Bunny sounds
"RABDIE1.VOC"   DIGI_BUNNYDIE1          425
"RABDIE2.VOC"   DIGI_BUNNYDIE2          426
"RABDIE3.VOC"   DIGI_BUNNYDIE3          427
"RABAMB.VOC"    DIGI_BUNNYAMBIENT       428

"STONE2.VOC"    DIGI_STONESLIDE         429
"NINCUT3.VOC"   DIGI_NINJAINHALF        430
"RIPCHST1.VOC"  DIGI_RIPPER2CHEST       431

"WHIPIN2.VOC"   DIGI_WHIPME             432      Whipping TV show
"ENDLEV3.VOC"   DIGI_ENDLEV             433
"MDALARM1.VOC"  DIGI_MDALARM            434      Metal detector

"METALBRK.VOC"  DIGI_BREAKMETAL         435      Breakage sounds
"DEBRIBRK.VOC"  DIGI_BREAKDEBRIS        436
"MARBELS.VOC"   DIGI_BREAKMARBELS       437

"BANZAI1.VOC"   DIGI_BANZAI             438      Player voices
"HAHA19.VOC"    DIGI_HAHA1              439
"HAHA11.VOC"    DIGI_HAHA2              440
"HAHA15.VOC"    DIGI_HAHA3              441

"TELEPT02.VOC"  DIGI_ITEM_SPAWN         442      Item respawns

"JG1075.VOC"    DIGI_NOREPAIRMAN2       443      Player voices
"JG1082.VOC"    DIGI_NOPOWER            444
"JG1087.VOC"    DIGI_DOUBLEUZI          445
"JG1088.VOC"    DIGI_NOTORDBUNNY        446   " dats no ordinary rabbit!"
"JG1103.VOC"    DIGI_CANBEONLYONE       447
"JG2000.VOC"    DIGI_MIRROR1            448
"JG2005.VOC"    DIGI_MIRROR2            449
"JG2020.VOC"    DIGI_HITTINGWALLS       450
"JG2032.VOC"    DIGI_GOTRAILGUN         451
"JG2053.VOC"    DIGI_RABBITHUMP1        452
"JG2054.VOC"    DIGI_RABBITHUMP2        453
"JG2045.VOC"    DIGI_RABBITHUMP3        454
"JG2087.VOC"    DIGI_RABBITHUMP4        455
"JG2074.VOC"    DIGI_FAGRABBIT1         456   " oooh, queer bunny!"
"JG2075.VOC"    DIGI_FAGRABBIT2         457   " oooh hoh, you make mistake there!"
"JG2078.VOC"    DIGI_FAGRABBIT3         458   " OHH YOU FAGGOT A RABBIT!"
"JG3005.VOC"    DIGI_STINKLIKEBABBOON   459
"JG3017.VOC"    DIGI_WHATYOUEATBABY     460
"JG3047.VOC"    DIGI_WHATDIEDUPTHERE    461
"JG3022.VOC"    DIGI_YOUGOPOOPOO        462
"JG6053.VOC"    DIGI_PULLMYFINGER       463
"JG3059.VOC"    DIGI_SOAPYOUGOOD        464
"JG4012.VOC"    DIGI_WASHWANG           465
"JG3070.VOC"    DIGI_DROPSOAP           466
"JG6051.VOC"    DIGI_REALTITS           467
"JG4002.VOC"    DIGI_MSTRLEEP           468
"JG4024.VOC"    DIGI_SEEKLEEPADVICE     469
"JG5042.VOC"    DIGI_AVENGELEEPDEATH    470
"JG5049A.VOC"   DIGI_LEEPGHOST          471

"WDOOR02.VOC"   DIGI_DOOR1              472      More door sounds
"MDOOR03.VOC"   DIGI_DOOR2              473
"603981_1.VOC"  DIGI_DOOR3              474

"FLAG03.VOC"    DIGI_FLAGWAVE           475      Flag ambience

"JG7009.VOC"    DIGI_SURFACE            476
"JG7001.VOC"    DIGI_GASHURT            477
"JG2001.VOC"    DIGI_BONUS_GRAB         478

"ACHCRY04.VOC"  DIGI_ANIMECRY           479      Girl sounds
"ACHS010.VOC"   DIGI_ANIMESING1         480
"ACHT1006.VOC"  DIGI_ANIMEMAD1          481
"ACHS016.VOC"   DIGI_ANIMESING2         482
"ACHT120A.VOC"  DIGI_ANIMEMAD2          483

"TELEPT02.VOC"  DIGI_PLAYER_TELEPORT    484      Player teleporting
"SLASH1.VOC"    DIGI_INTRO_SLASH        485

"WARNING.VOC"   DIGI_WARNING            486
"WHIRL1.VOC"    DIGI_INTRO_WHIRL        487

"ACHF1003.VOC"  DIGI_TOILETGIRLFART1    488      Toilet girl sounds
"ACHF1002.VOC"  DIGI_TOILETGIRLFART2    489
"ACHF1016.VOC"  DIGI_TOILETGIRLFART3    490

"CHIMES4.VOC"   DIGI_WINDCHIMES         491      Wind Chime ambience

"JGB023.VOC"    DIGI_MADATCARPET        492      Player voices
"JGB020.VOC"    DIGI_JUMPONCARPET       493
"JGB080.VOC"    DIGI_USEBROKENVEHICLE   494
"JGB106.VOC"    DIGI_STEPONCALTROPS     495
"JGB130.VOC"    DIGI_WANGSEESERP        496   LW " ooh, like I scared of little snake! HAHAHA"
"JGSB4.VOC"     DIGI_SERPTAUNTWANG      497
"JGB166.VOC"    DIGI_WANGTAUNTSERP1     498   LW " HEY! COME BACK HERE AND FINISH FIGHT!"
"JGB156.VOC"    DIGI_WANGTAUNTSERP2     499   LW " over scary <mumbling> snake... shitface!"
"JGB193.VOC"    DIGI_WANGORDER1         500   LW " you order game now! so lo wang can kick more ass!"
"JGB202.VOC"    DIGI_WANGORDER2         501   LW " ordering game, is only way to keep honor"
"JGB340A.VOC"   DIGI_WANGDROWNING       502

"JGEN06.VOC"    DIGI_ZILLAREGARDS       503
"MSG9.VOC"      DIGI_PMESSAGE           504

"UGLY1A.VOC"    DIGI_SHAREND_UGLY1      505      First episode ending LW " overscary, snake!"
"UGLY1B.VOC"    DIGI_SHAREND_UGLY2      506      LW " SHITFACE!"
"TELEPT07.VOC"  DIGI_SHAREND_TELEPORT   507      - crazy teleport noise (rare)

"GOROSW1.VOC"   DIGI_HOTHEADSWITCH      508      Change head weapon mode
"BTCREAK2.VOC"  DIGI_BOATCREAK          509      New boat sounds
"BTRUN05.VOC"   DIGI_BOATRUN2           510
"BTIDLE4.VOC"   DIGI_BOATIDLE           511
"SHIPBELL.VOC"  DIGI_SHIPBELL           512
"SHIPHRN1.VOC"  DIGI_FOGHORN            513

"EXP3.VOC"      DIGI_CANNON             514      Cannon firing

"JG41001.VOC"   DIGI_JG41001            515      Player voices LW " hey, you look like you need ass kicked!"
"JG41012.VOC"   DIGI_JG41012            516      Most of these will be LW " hmm, lo wang kinda hungry now"
"JG41018.VOC"   DIGI_JG41018            517      the map specific stuff   nothing
"JG41028.VOC"   DIGI_JG41028            518   LW " hehehe, tastes a like a chicken"
"JG41048.VOC"   DIGI_JG41048            519   LW " hmmm, what have we here"
"JG41052.VOC"   DIGI_JG41052            520   LW " ahaaahh I see now"
"JG41058.VOC"   DIGI_JG41058            521   LW " hmph, rather kick ass than solve puzzle"
"JG41060.VOC"   DIGI_JG41060            522   LW " oooh, smell remind me of old girlfriend!"
"JG41075.VOC"   DIGI_JG41075            523   LW " herro, anybody there?"
"JG42004.VOC"   DIGI_JG42004            524   LW " hello, is your refrigerator running? Better catch it! haha"
"JG42019.VOC"   DIGI_JG42019            525   " hello, bowlerama? you got 16 pound balls? hhahaa"s
"JG42021.VOC"   DIGI_JG42021            526   " hello, is Iva there? Iva bigbottom, hahaha "
"JG42028.VOC"   DIGI_JG42028            527    " bombs awaay, hahaha"
"JG42033.VOC"   DIGI_JG42033            528    " Tora tora torah!"
"JG42034.VOC"   DIGI_JG42034            529   " row row row your boat gently down the stream, dinky hanging out"
"JG42050.VOC"   DIGI_JG42050            530   " lo wang come for you, little snake coward!"
"JG42056.VOC"   DIGI_JG42056            531   " you not slither away a second time!"
"JG42061.VOC"   DIGI_JG42061            532   " dat what you get for making lo wang chase you!"
"JG43004.VOC"   DIGI_JG43004            533   " uh oh, look like lo wang need to cut back on sushi"
"JG43015.VOC"   DIGI_JG43015            534   " hehehe, lo wang need EXTRA LARGE!"
"JG43019.VOC"   DIGI_JG43019            535   "noo, can't use a dis, this won't fit on my fingah!"

"JG43021.VOC"   DIGI_JG43021            536   " before you attack her, wrap your wackah! hahaha"
"JG44011.VOC"   DIGI_JG44011            537   " hmm this looks like the work of zilla!!"
"JG44014.VOC"   DIGI_JG44014            538   " holy pile a dynamite!"
"JG44027.VOC"   DIGI_JG44027            539   " ehehe, hey you polish too?"
"JG44038.VOC"   DIGI_JG44038            540   " heeey chickiiie.., you tighten my nuts? hmm? "
"JG44039.VOC"   DIGI_JG44039            541   " lo wangs driveshaft need service.."
"JG44048.VOC"   DIGI_JG44048            542   " so, you good with hands? ehehe"
"JG44052.VOC"   DIGI_JG44052            543   " you got something with a bigger back seat? hmm?"
"JG45014.VOC"   DIGI_JG45014            544   " oh baby, whats up a you tailpipe?"
"JG44068.VOC"   DIGI_JG44068            545   "hey how bout a test drive doll, uh?"
"JG45010.VOC"   DIGI_JG45010            546   " see my stickshift? haha.. its in a fourth gear!hahaha"
"JG45018.VOC"   DIGI_JG45018            547   " hey peaches, how bout you moon me? ahahaha"
"JG45030.VOC"   DIGI_JG45030            548   " hey baby.. you in bed? is there room for two!?
"JG45033.VOC"   DIGI_JG45033            549   " you good lookin sailer babe!"
"JG45043.VOC"   DIGI_JG45043            550   " want to cruise a with a lo wang? hmmm?"
"JG45053.VOC"   DIGI_JG45053            551   " ooh, lo wang gonna vomit now"
"JG45067.VOC"   DIGI_JG45067            552   " lady, somebody beat you with a ugly stick"
"JG46005.VOC"   DIGI_JG46005            553   " ooh lo wang wish somewhere else now" 
"JG46010.VOC"   DIGI_JG46010            554   " maybe if I close eyes it go away..."

"LANI049.VOC"  DIGI_LANI049             555      Race Queen talks back
"LANI051.VOC"  DIGI_LANI051             556
"LANI052.VOC"  DIGI_LANI052             557
"LANI054.VOC"  DIGI_LANI054             558

"LANI060.VOC"  DIGI_LANI060             559      Sailor Girl talks back
"LANI063.VOC"  DIGI_LANI063             560
"LANI065.VOC"  DIGI_LANI065             561
"LANI066.VOC"  DIGI_LANI066             562

"LANI073.VOC"  DIGI_LANI073             563      Mechanic girl talks back
"LANI075.VOC"  DIGI_LANI075             564
"LANI077.VOC"  DIGI_LANI077             565
"LANI079.VOC"  DIGI_LANI079             566

"LANI089.VOC"  DIGI_LANI089             567      Old prune talks back
"LANI091.VOC"  DIGI_LANI091             568
"LANI093.VOC"  DIGI_LANI093             569
"LANI095.VOC"  DIGI_LANI095             570

"AD5.VOC"      DIGI_VENTWALK            571      Climb in a vent
"AD6.VOC"      DIGI_CARWALK             572      Walk on a car
"JET05.VOC"    DIGI_JETSOAR             573      Crashing jet
"VC04.VOC"     DIGI_VACUUM              574      Driving a vacuum cleaner

"LANI017.VOC"  DIGI_GIRLNINJAALERTT     575      Female Warrior sounds
"LANI033.VOC"  DIGI_GIRLNINJASCREAM     576
"LANI001.VOC"  DIGI_GIRLNINJAALERT      577

"CACKLE.VOC"   DIGI_PRUNECACKLE         578      Old prune laughing
"CACKLE2.VOC"  DIGI_PRUNECACKLE2        579
"CACKLE3.VOC"  DIGI_PRUNECACKLE3        580

"SUMO058.VOC"  DIGI_SUMOSTOMP           581      Sumo stomping

"ELEV01.VOC"   DIGI_VATOR               582      Long elevator sound

"JG9009.VOC"   DIGI_JG9009              583      Player voice "2 wangs are better than 1"

"Z16004.VOC"   DIGI_Z16004              584      Zilla voices
"Z16012.VOC"   DIGI_Z16012              585
"Z16022.VOC"   DIGI_Z16022              586
"Z16027.VOC"   DIGI_Z16027              587

"JG93030.VOC"  DIGI_JG93030             588      Player voice " you will die w/o honor zilla!"
"JG94002.VOC"  DIGI_JG94002             589                   " gimme your best shot, roboturd!"

"Z17010.VOC"   DIGI_Z17010              590      Zilla voices
"Z17052.VOC"   DIGI_Z17052              591
"Z17025.VOC"   DIGI_Z17025              592

"ML25014.VOC"  DIGI_ML25014             593      Master Leep and ML " proceed with caution, lo wang"
"ML250101.VOC" DIGI_ML250101            594      more player voices  ML " BEWARE!, lo Wang."
"JG9022.VOC"   DIGI_JG9022              595   LW " hmm, maybe a boat would help me reach zilla"
"JG9032.VOC"   DIGI_JG9032              596   LW " nap nap you freak! LO WANG IN DA HOUSE!
"JG9038.VOC"   DIGI_JG9038              597   LW "hmm, no zilla. LO WANG GET ANGRY NOW!"
"JG9055.VOC"   DIGI_JG9055              598   LW " ooh, zillas men forget to duck again, TOO BAD!"
"JG9060.VOC"   DIGI_JG9060              599   LW " hmm, another of zillas temples to search, I must be gettn close"
"JG92055.VOC"  DIGI_JG92055             600   LW " hmm, something funny or dinosaur taking a piss!"
"ML25032.VOC"  DIGI_ML25032             601   ML " be careful lowang, a mighty foe awaits you"
"JG92036.VOC"  DIGI_JG92036             602   LW " hory cow! looka like DUKE NUKEM!"
"JG92042.VOC"  DIGI_JG92042             603   LW " oooh, that why lo wang prefer to walk!"
"ML26001.VOC"  DIGI_ML26001             604   ML " hit zilla where it hurts, take out his refinery"
"JG93000.VOC"  DIGI_JG93000             605   LW " time to detroy zillas oil supply!"
"JG93011.VOC"  DIGI_JG93011             606   LW " must be a rat, cause i trapped like one!"
"JG93018.VOC"  DIGI_JG93018             607   LW " no cell can hold this wang!"
"JG93023.VOC"  DIGI_JG93023             608   LW " I come for you soon, zilla" 
"ML26008.VOC"  DIGI_ML26008             609   ML" Zilla is here lo wang, remember what I taught you, always!"
"ML26011.VOC"  DIGI_ML26011             610   ML" secret level!"
"JG94007.VOC"  DIGI_JG94007             611     nothing.
"JG94024.VOC"  DIGI_JG94024             612     LW " EH WHAT HAPPEN? HEY WHAT THE HELL!"
"JG94039.VOC"  DIGI_JG94039             613     LW " you are weak as a baby fart, go live in fear"
"JG95012.VOC"  DIGI_JG95012             614     LW " after all that work, lo wang feel like a song!"

^P
^3 ---------------------------
^3 2.      Ambient Sound Index
^3 ---------------------------

Ambient sounds do not work the same as digital sounds. Rather than
triggering them with a door or something, the game either constantly or
intermittently plays the ambient sound in an area of the map. This is used
for waterfalls, wind, or other environmental sound effects.

This section is divided into two columns. The first column is an identifier
that the programmers used to name the ambient sound. The second column is
the sound entry number you need to use in TAG2 of the AMBIENT_SOUND
(hitag 1002) ST1. Don't use these sound numbers with SOUND_SPOT (hitag 134)
ST1's, or your sound won't work properly.

All of these ambient sounds have an entry with a matching identifier in the
digital sound index above.

NOTE: Some of these ambient sounds were not used in the game. Feel free to
      place your own custom ambient sounds in these slots.

^3+--------------------------------------+-------+
^3|IDENTITY                              |ENTRY  |
^3+--------------------------------------+-------+

DIGI_BUBBLES                            0
DIGI_CRICKETS                           1
DIGI_CAVEDRIP1                          2
DIGI_CAVEDRIP2                          3
DIGI_DRIP                               4
DIGI_WATERFALL1                         5
DIGI_WATERFALL2                         6
DIGI_WATERFLOW1                         7
DIGI_WATERFLOW2                         8
DIGI_FIRE1                              9
DIGI_FIRE2                              10
DIGI_GONG                               11
DIGI_LAVAFLOW1                          12
DIGI_MUBBUBBLES1                        13
DIGI_EARTHQUAKE                         14
DIGI_SEWERFLOW1                         15
DIGI_STEAM1                             16
DIGI_VOLCANOSTEAM1                      17
DIGI_SWAMP                              18
DIGI_THUNDER                            19
DIGI_UNDERWATER                         20
DIGI_VOID1                              21
DIGI_VOID2                              22
DIGI_VOID3                              23
DIGI_VOID4                              24
DIGI_VOID5                              25
DIGI_ERUPTION                           26
DIGI_VOLCANOPROJECTILE                  27
DIGI_LIGHTWIND                          28
DIGI_STRONGWIND                         29
DIGI_BREAKINGWOOD                       30
DIGI_BREAKSTONES                        31
DIGI_BOMBRFLYING                        40
DIGI_BOMBRDROPBOMB                      41
DIGI_DRILL                              42
DIGI_GEAR1                              43
DIGI_MACHINE1                           44
DIGI_ENGROOM1                           45
DIGI_ENGROOM2                           46
DIGI_ENGROOM3                           47
DIGI_ENGROOM4                           48
DIGI_ENGROOM5                           49
DIGI_HELI                               50
DIGI_BIGHART                            51
DIGI_WIND4                              52
DIGI_SPOOKY1                            53
DIGI_JET                                54
DIGI_DRUMCHANT                          55
DIGI_ASIREN1                            56
DIGI_FIRETRK1                           57
DIGI_TRAFFIC1                           58 Randomly picks traffic ambience
DIGI_TRAFFIC2                           59
DIGI_TRAFFIC3                           60
DIGI_TRAFFIC4                           61
DIGI_TRAFFIC5                           62
DIGI_TRAFFIC6                           63
DIGI_HELI1                              64
DIGI_JET1                               65
DIGI_MOTO1                              66
DIGI_MOTO2                              67
DIGI_NEON1                              68
DIGI_SUBWAY                             69
DIGI_TRAIN1                             70
DIGI_BIRDS1                             71
DIGI_BIRDS2                             72
DIGI_AMOEBA                             73
DIGI_TRAIN3                             74
DIGI_TRAIN8                             75
DIGI_WHIPME                             76
DIGI_FLAGWAVE                           77
DIGI_ANIMECRY                           78
DIGI_WINDCHIMES                         79
DIGI_BOATCREAK                          80
DIGI_SHIPBELL                           81
DIGI_FOGHORN                            82

^P page 8
^3 ---------------------------------------
^3 2.      The Shadow Warrior Track Sprite
^3 ---------------------------------------

Tracks are a powerful feature of Shadow Warrior. Similar to the "Locators"
in Duke Nukem 3D, tracks are a series of sprites which determine the path
certain game objects can follow. Sector objects, sprite objects, and
some actors can follow tracks.

^3 2.1     Meet the Track sprites:

You can find the track sprites in the tileset starting at tile 1900 and
proceeding all the way up to tile 1999. They are blue numbers counting up
from 0 to 99. A single track uses one of these tiles, (i.e. track #0 only
uses tile 1900), so this means you can have up to 100 different tracks in a
single level. In 2D mode, the sprite will have a sign that reads "T0", "T1",
or whatever depending on which track # it is.

^3 2.2     Building a track:

Build a track by placing track sprites all along the route you want an
object to take. All of the track sprites in a single track use the same tile
(i.e. the sprites for track #0 will all use tile 1900). When an object
follows a track, it will move in a straight line from one track sprite to the
next, then change direction and move in a straight line to the next track
sprite. It will do this around the entire track until it reaches the end, 
then it will head in a straight line back to the start and begin the process
all over again. All tracks must loop like this, and a track can never cross
its own path.

^3 2.3     Tagging a track sprite:

Track sprites only make use of their hitag and lotag. Not all track sprites
need a lotag, if you want the object to travel to that point, but don't want
to alter its behavior.

        ^3 2.3.1 Lotag

        The track sprite's lotag is its "tracktag." It identifies what kind
        of behavior should occur at that point when an object reaches it
        while following the track. Different tracktag values allow for
        changing speeds, bobbing, firing, waiting, and much more.

        ^3 2.3.2 Hitag

        The hitag is used to give additional information for those tracktags
        that need it. For instance, TRACK_SET_SPEED (tracktag 702) uses its
        hightag as the actual speed value.

^3 2.4     Using a track:

Some tracktags only work for sector object, while others only work for
actors. Most tracktags work for both sector objects and actors.

        ^3 2.4.1 Sector and sprite objects

        To make a sector object (or a sector object tagged as a sprite
        object) follow a track, just set the sector hitag of the center
        sector to the number of the track. So if you've got a track #5
        in your level, you can make a sector object follow that track by
        setting the center sector hitag to 5.

        ^3 2.4.2 Actors

        Some actors will follow a track, with varying degrees of success.
        To make an actor follow a track, give the actor sprite a lotag
        of 30000 + the track number. So to make a green guardian follow
        track #10, you would give him a lotag of 30010. Angle the actor to
        the right to make him move in the forward direction (from start to
        end) or angle the actor to the left to make him move in the backward
        direction (from end to start.)

^3 2.5     Tracktag function reference:

Examples of most of these can be found throughout Shadow Warrior. A few
simple tracktags are also demonstrated in EXAMPLE.MAP.

^3LOTAG 700:      TRACK_START

        Every track needs a TRACK_START and a TRACK_END (tracktag 701).
        This is the first sprite on a track, and it marks the beginning.

^3LOTAG 701:      TRACK_END

        Every track needs a TRACK_START (tracktag 700) and a TRACK_END.
        This is the last sprite on a track. When an object encounters this,
        it loops back to the TRACK_START.
                
^3LOTAG 702:      TRACK_SET_SPEED         
                Hitag = Target speed (0 to 128)

        Set the target speed at this point. Setting the hitag to 0 is a good
        way to make sure the object stops moving once it reaches this
        point. (See the boat in $WHIRL.MAP)

^3LOTAG 703:      TRACK_STOP
                Hitag = Seconds to stop

        Object will pause at this point on the track for the number of
        seconds in the hitag.

^3LOTAG 704:      TRACK_REVERSE

        Reverses the object's direction. It will now travel along the
        track in the opposite direction. Causes some tags to have an
        opposite effect (e.g. tracktags 705 and 706)

^3LOTAG 705:      TRACK_SPEED_UP
                Hitag = Speed offset (0 to 128)

        Target speed will increase by the amount in the hitag.

^3LOTAG 706:      TRACK_SLOW_DOWN
                Hitag = Speed offset (0 to 128)

        Target speed will decrease by the amount in the hitag.
        
^3LOTAG 707:      TRACK_VEL_RATE
                Hitag = Acceleration (1 to 12, default 6)

        The rate at which the actual speed approaches the target speed.

^3LOTAG 709:      TRACK_ZUP
                Hitag = Pixel amount

        Moves the floor of the object up by the number of pixels in the
        hitag.

^3LOTAG 710:      TRACK_ZDOWN
                Hitag = Pixel amount

        Moves the floor of the object down by the number of pixels in the
        hitag.

^3LOTAG 711:      TRACK_ZRATE
                Hitag = Rate

        Sets the rate at which TRACK_ZUP/TRACK_ZDOWN moves. Defaults to 256.

^3LOTAG 712:      TRACK_ZDIFF_MODE
                Hitag = Z offset

        Special mode where the object looks at the Z-height of the next track
        point and moves up or down to achieve the destination. In the hitag
        is a negative delta Z from the placement of the track sprites Z
        value.

^3LOTAG 715:      TRACK_SPIN
                Hitag = Spin speed

        Object spins clockwise as it goes along its track.

^3LOTAG 716:      TRACK_SPIN_STOP
                Hitag = Angle (0 to 2048)

        Object stops spinning. It will then point in the direction indicated
        by the hitag.

^3LOTAG 717:      TRACK_BOB_START
                Hitag = Pixel height to bob

        Causes a sector object to start bobbing up and down like a cork.

^3LOTAG 718:      TRACK_BOB_SPEED
                Hitag = Speed at which to bob

        Sets the speed at which a sector object will bob.

^3LOTAG 719:      TRACK_BOB_STOP

        The sector object will stop bobbing.

^3LOTAG 720:      TRACK_SPIN_REVERSE 
                Hitag = Spin speed

        Object spins counter-clockwise as it goes along its track.

^3LOTAG 723:      TRACK_SO_SINK
                Hitag = Speed of sinking

        Start sector object sinking to ST1 SECT_SO_SINK_DEST (hitag 33).
        Will sink at the speed in the hitag. Look at the boat in $WHIRL.MAP
        for an example.

^3LOTAG 724:      TRACK_SO_FORM_WHIRLPOOL

        Will cause a sector object to lower the sectors tagged with
        SECT_SO_FORM_WHIRLPOOL (hitag 37) ST1. Look at the boat in
        $WHIRL.MAP for an example.

^3LOTAG 725:      TRACK_MOVE_VERTICAL
                Hitag = Speed of movement - default is 256

        Move sprite objects (not sector objects) straight up or down in the
        Z direction to the next point's Z height then continue along the
        track.

^3LOTAG 726:      TRACK_WAIT_FOR_EVENT
                Hitag = Match

        Object will wait at this point on the track for a trigger or switch
        to be activated. Most types of triggers and switches with the same
        match tag can be used to free the sector object to continue. Look
        at the moving crane in $SEABASE.MAP for an example.

^3LOTAG 728:      TRACK_MATCH_EVERYTHING
                Hitag = Match

        When the object or actor reaches this point, it will trigger
        everything with this match tag.

^3LOTAG 729:      TRACK_MATCH_EVERYTHING_ONCE
                Hitag = Match

        When the object or actor reaches this point, it will trigger
        everything with this match tag once, and never again.

^3LOTAG 751:      TRACK_ACTOR_STOP
                Hitag = Seconds

        Causes an actor to stop for the number of seconds in the hitag.

^3LOTAG 752:      TRACK_ACTOR_REVERSE

        Reverses the actor's direction. It will now travel along the
        track in the opposite direction. Note that tracktags 753 and
        754 will have the opposite effect when traveling the reverse
        direction

^3LOTAG 753:      TRACK_ACTOR_SPEED_UP
                Hitag = Speed offset (0 to 128)

        The actor's target speed will increase by the amount in the hitag.

^3LOTAG 754:      TRACK_ACTOR_SLOW_DOWN
                Hitag = Speed offset (0 to 128)

        The actor's target speed will decrease by the amount in the hitag.
        
^3LOTAG 755:      TRACK_ACTOR_VEL_RATE
                Hitag = Acceleration (1 to 12, default 6)

        The rate at which the actor's actual speed approaches the target
        speed.
        
^3LOTAG 771:      TRACK_ACTOR_JUMP
                Hitag = Height to jump (default 384)

        Actor will jump. Only works with actors who can jump, like evil
        ninjas, rippers, and bunnies.

^3LOTAG 772:      TRACK_ACTOR_CRAWL

        Causes an actor to crawl. Only works with evil ninjas.

^3LOTAG 780:      TRACK_ACTOR_CLOSE_ATTACK1

        An actor will do his close range attack, like the sword attack in the
        case of the green guardian.

^3LOTAG 782:      TRACK_ACTOR_ATTACK1

        An actor will do his long range attack, like shooting fireballs in
        the case of the green guardian.

^3LOTAG 791:      TRACK_ACTOR_OPERATE
                
        Point the track sprite angle in the direction of the operable
        sector, wall, or switch. Actor will operate the switch, door, or
        whatever, just like a player pressing SPACEBAR. May only work in
        certain cases.

^3LOTAG 792:      TRACK_ACTOR_CLIMB_LADDER

        The track sprite angle must be facing the ladder. Only evil ninjas
        can climb ladders.

^3LOTAG 799:      TRACK_ACTOR_WAIT_FOR_PLAYER
                Hitag = Range (Largest grid square = 1024)

        The actor will wait for the player to come into range before moving
        from this point. Look at the rabbit on the mountain in $SHRINE.MAP
        for an example of this.


^3-------------------------------
^3 3.      Other Important Sprites
^3-------------------------------

^3 3.1     Actors:

        ^3 3.1.1 Hornets (picnum 800)

        Use a sprite with picnum 800 to place a hornet in your map.

        ^3 3.1.2 Bouncing Betty (picnum 817)

        This sprite also comes in voxel (3D sprite) format. This actor is
        functionally the same as an "Accursed Head." A betty can be tagged
        to produce different effects. Set the HITAG to these values for
        the following effects:

        Hitag 0:        Explosion (The betty just explodes)

        Hitag 1:        ChemBombs
                        Lotag = # of chembombs to spawn (max 3, default 2)

        Hitag 2:        Caltrops
                        Lotag = # of caltrops to spawn (max 10, default 5)

        Hitag 3:        Flash effect (blinds the player like a FlashBomb)
                        
        Hitag 4:        Grenades
                        Lotag = # of grenades to spawn (max 10, default 5)

        ^3 3.1.3   Accursed Head (picnum 820)

        These are functionally the same as a bouncing betty and can be
        tagged similarly. (see above)

        ^3 3.1.4   Sumo Boss (picnum 1210)

        If you set the sprite's palette to 16, he will be a "mini-boss,"
        which is smaller and less powerful.

        ^3 3.1.5   Serpent Boss (picnum 1300)

        If you set the sprite's palette to 16, he will be a "mini-boss,"
        which is smaller and less powerful.

        ^3 3.1.6   Coolie (picnum 1400)

        Use a sprite with picnum 1400 to place a coolie in your map.

        ^3 3.1.7   Coolie Ghost (picnum 1441)

        Use a sprite with picnum 1441 to place a coolie ghost in your map.

        ^3 3.1.8   Green Guardian (picnum 1469)

        Use a sprite with picnum 1469 to place a guardian in your map.

        ^3 3.1.9   Little Ripper (picnum 1580)

        If you set the sprite's palette to 7, he will become a big boss
        ripper.

        ^3 3.1.10  Fish (picnum 3780)

        Use a sprite with picnum 3780 to place a fish in your map.

        ^3 3.1.11  Evil Ninja (picnum 4096)

        You can set the palette on an Evil Ninja to make him fire different
        kinds of weaponry.

        Palette  0: Default. His pants appear blue in BUILD, but will be
                    brown in the game. This ninja throws shurikens.
        Palette 17: Gray ninja. He's tough and fires grenades.
        Palette 19: Red ninja. He's tough and fires rockets.
        Palette 21: Shadow ninja. He's really tough and can fire two kinds
                    of napalm, plus use flash bombs.
        Palette 24: Orange ninja. Like a red ninja but fires heat seeking
                    rockets.

        ^3 3.1.12  Crouching Evil Ninja (picnum 4162)

        This type of ninja stays crouched except to fire at the player. This
        is great for ducking behind crates and whatnot. His palette can be
        set just like the regular evil ninja, and he will take on the
        toughness of that color, but he won't fire the heavy weaponry.

        ^3 3.1.13  Big Ripper (picnum 4320)

        If you set the sprite's palette to 7, he will become a big boss
        ripper.

        ^3 3.1.14  Bunny (picnum 4550)

        Bunnies come in three flavors. Set their palette to define which
        kind the actor is. You can also scale a bunny down to make it
        younger. It will grow into an adult before mating.

        Palette  0: Female bunny. Appears blue in BUILD but will be light
                    brown in the game.
        Palette 17: White bunny. Monty Python style killer rabbit.
        Palette 24: Male bunny. Orange-brown colored.

        ^3 3.1.15  Female Warrior (picnum 5162)

        Use a sprite with picnum 5162 to place a female warrior in your map.

        ^3 3.1.16  Zilla Boss (picnum 5426)

        Use a sprite with picnum 5426 to place a Zilla boss in your map.
        There is no mini-boss version of Zilla.

        ^3 3.1.17  Leaders And Followers

        Give an actor a hitag of 1008 and it will be part of a group
        mentality. If the actor has a lotag of 1, it will be a follower,
        while if it has a lotag of 2, it will be a leader. Followers will
        hover around the nearest leader unless the player is within range.
        This works especially well with rippers and fish.

        ^3 3.1.18  Spawning Actors With A Trigger

        Give any actor TAG_SPAWN_ACTOR (lotag 203), and it will not appear
        in the map immediately when you start out. The hitag of the actor is
        a match tag. When that match tag is triggered, with a floor trigger
        or a switch or whatever, the actor will be magically teleported in.

^3 3.2     Cracks (TAG_SPRITE_HIT_MATCH):

Any sprite in the game can be given a lotag of 257 and it will then become a
TAG_SPRITE_HIT_MATCH. This means that when the sprite is shot by the player,
it will trigger any event matched to the hitag of the TAG_SPRITE_HIT_MATCH
sprite. By default, the sprite will be invisible, unless it uses picnum 80,
in which case it will be visible. Picnum 188 is another crack sprite,
designed to be usable on ceilings or floors, but it will still be invisible
by default. Here's the info:

^3LOTAG 257:      TAG_SPRITE_HIT_MATCH
                Hitag = Match. Can trigger anything.
                TAG3  = Default is 32. The larger this number, the more
                        sensitive the sprite is to explosion radius.
                TAG7  = Reacts to ammo type:
                        0: Default. React only to explosions with radius
                           damage.
                        1: React only to a direct hit by a weapon with
                           explosive radius. (e.g. Hit it directly with a
                           rocket)
                        2: React to any explosive weapon or any hitscan
                           weapon (uzis or shotgun).
                        3: React to any weapon hit, including shurikens,
                           sword, and fist.
                        4: React only to sector object weapon fire. This
                           means any type of sector object weapon, including
                           machine gun.
                TAG8  = This is kind of a weird tag. Add the numbers of the
                        effects you want together and put the total in TAG8:
                        +1: Force the sprite to be invisible
                        +2: Force the sprite to be visible
                        +4: Do not kill this sprite when it is hit. Can be
                            triggered over and over again
                        +8: Bouncing a grenade off of the sprite counts as a
                            hit 
EXAMPLES: Rooms CA and EB in EXAMPLE.MAP.

^3 3.3     Switches: (picnums 551-584)

Any sprite can be tagged as a switch, but it will only animate if it's using
one of the picnums (551-584). There are several different switch tags, used
to activate different types of events. A switch sprite's lotag identifies
what kind of switch it is, while its hitag is a match tag to the event you
wish to trigger. In most cases a switch will not make a sound. You must place
a SOUND_SPOT (hitag 134) ST1 nearby with a TAG2 that matches the switch's
hitag. I recommend sound #201 for most switches. Here is a list of the
different switch lotags you can use:

^3LOTAG 206:      TAG_SPRITE_SWITCH_VATOR
                Hitag = Match

        This switch is used to activate vators, spikes, rotators, and
        slidors - basically any kind of door. This is the best switch to use
        with a door because multiple switches with the same match will
        animate, and the switch pays attention to auto-closing doors, doors
        that have a player holding them open, etc. etc. When placing the
        switch in the BUILD editor, be sure to use the frame that matches
        the door's starting position. For instance, if BOOL1 is set to "1" on
        a vator, be sure to use the second frame of a switch, because that
        door considers itself to be "on." Otherwise, the switch might not
        animate the first time you operate it.

^3LOTAG 210:      TAG_LIGHT_SWITCH
                Hitag = Match

        This switch can only be used to activate LIGHTING (hitag 108) ST1's,
        but there's no real good reason to do this, since a
        TAG_SWITCH_EVERYTHING (lotag 211) will work just as well. It's only
        included here because you'll find it in several Shadow Warrior maps.

^3LOTAG 211:      TAG_SWITCH_EVERYTHING
                Hitag = Match

        This switch is the one you will use most often, because it can
        trigger any event in the game.

^3LOTAG 212:      TAG_SWITCH_EVERYTHING_ONCE
                Hitag = Match

        This is the same as TAG_SWITCH_EVERYTHING (lotag 211) in that it can
        be used to trigger any event, but this switch can only be activated
        once, and never again.

^3LOTAG 213:      TAG_COMBO_SWITCH_EVERYTHING
                Hitag = Match
                TAG3  = 0: The switch must be off to trigger the event
                        1: The switch must be on to trigger the event

        Every COMBO switch in the level with the same hitag must be in the
        state specified by their TAG3 before the event will be triggered.
        This switch can trigger any event. COMBO switches make sound
        automatically, without a SOUND_SPOT (hitag 134) ST1.

^3LOTAG 214:      TAG_COMBO_SWITCH_EVERYTHING_ONCE
                Hitag = Match
                TAG3  = 0: The switch must be off to trigger the event
                        1: The switch must be on to trigger the event

        Every COMBO switch in the level with the same hitag must be in the
        state specified by their TAG3 before the event will be triggered.
        This switch can trigger any event. COMBO switches make sound
        automatically, without a SOUND_SPOT (hitag 134) ST1. Once the combo
        is properly triggered, it can never be triggered again.

^3LOTAG 216:      TAG_SPAWN_ACTOR_SWITCH
                Hitag = Match

        This switch can only be used to spawn actors with a lotag of 203.
        The actors and the switch must have the same hitag.

^3LOTAG 304:      TAG_ROTATE_SO_SWITCH
                Hitag = # of the sector object to rotate

        Operating this switch causes a sector object to rotate smoothly
        clockwise 90 degrees. We never found a place to use this in Shadow
        Warrior, but it's a pretty cool feature nevertheless. This switch
        has an automatic sound associated with it, and is demonstrated in
        EXAMPLE.MAP, room FD.

        ^3 3.3.1   Shootable switch (picnum 577)

        Switch tile 577 is unique, because it can be shot by the player
        to activate and deactivate. Don't match this switch to a locked door,
        though, because the door can be activated by shooting the switch,
        despite its locked status.

        ^3 3.3.2   Exit switch (picnum 2470)

        An exit switch causes the level to end when the player operates it,
        and the bonus or frag screen is displayed. Any switch can be tagged
        as an exit switch, but tile 2470 is the graphic that Shadow Warrior
        usually uses. An exit switch must have a lotag of 116. The hitag
        specifies which level to go to next, but this only works if the
        map has the same filename as one of the official Shadow Warrior
        game maps. For a standard external map, a hitag of 0 will suffice.

^3 3.4     Keys And Keyholes:

        ^3 3.4.1   Keys (picnums 1765-1779)

        These are the keys used to unlock doors (ignore the little dog
        sprites.) You can mix and match key types in a level, but be
        aware that some keys will overwrite the others in the status bar
        when the player picks it up. A gold master key will overwrite
        a red keycard, a silver master key will overwrite a blue keycard,
        a bronze master key will overwrite a green keycard, and a red
        master key will overwrite a yellow keycard.

        ^3 3.4.2   Keyholes (picnums 1846, 1850, and 1852)

        These are the sprites the player operates to unlock a door with
        a key. Always set the lotag to 29. Set the hitag equal to the lotag
        of the SECT_LOCK_DOOR (hitag 29) ST1. The BUILD editor will
        automatically set the palette of the keyhole when you re-enter 3D
        mode from 2D mode. Use the correct style of keyhole to match the
        desired key.

^3 3.5     TV Monitors: (picnums 3830-3837)

These sprites are used in conjunction with mirrors and MIRROR_CAM
(hitag 1000) ST1. Rotate the monitor sprite flat and place it in front of the
mirror, facing out away from the wall. Give it a hitag equal to TAG2 of the
MIRROR_CAM. This is only necessary for TV monitors, not for magic monitors.
See EXAMPLE.MAP for a demonstration of how to build this.

^3 3.6     QuickJump And QuickJumpDown

        ^3 3.6.1   QuickJump (picnum 2309)

        This is a special sector effector. When an actor steps on the QJ
        sprite, he will jump in the direction the sprite is pointing. This
        is a good way to get actors to jump up onto ledges, and it looks
        pretty cool. Only jumping actors (ninjas, bunnies, and rippers) are
        affected by this.

        ^3 3.6.2   QuickJumpDown (picnum 2310)

        This is another special sector effector, similar to QuickJump.
        When an actor steps on the QJD sprite, he will jump down off a
        ledge in the direction the sprite is pointing. Make ninjas leap
        down on the player from high ledges. Only jumping actors (ninjas,
        bunnies, and rippers) are affected by this.

^3 3.7     Gratings

        Gratings can be tagged so the player can operate them by pressing
        the SPACEBAR on them. Point the grating sprite in the direction you
        want it to move. The lotag must be 200. The hitag is the distance
        the sprite will move, 1024 is a good distance. This feature may have
        other applications.

^3 3.8     DeathFlag(tm) Capture the Flag

Shadow Warrior has a pretty cool Capture the Flag facility that we didn't
really take advantage of in the game. 

        ^3 3.8.1   The Flag Sprite (picnum 2520)
                HITAG= 0:    Default. Flag explodes if carried for longer
                             than 30 seconds, or if carrier dies. The flag
                             respawns every 30 seconds.
                       1003: Flag carrier must die or score before the flag
                             will respawn back at the base.
                LOTAG= Match. When the carrier scores with this flag, this
                       match tag will be triggered. Reward a score with
                       free items, trigger a sound, whatever.
                TAG5 = If non-zero, the match in TAG6 will be triggered when
                       this flag is scored this many times. Make a special
                       reward happen every ten points, or open a secret
                       passage to the exit when the score reaches 25.
                TAG6 = Secondary match. Used with TAG5.
                BOOL1= 0: The score is incremented when the carrier enters
                          the score sector.
                       1: Do not score when entering the score sector. This
                          feature can be used for a flag that you just
                          want to trigger things with, but not score. For
                          example: a map might have a red base and a blue
                          base, and a neutral yellow flag. Teams race to
                          get the yellow flag which when returned to their
                          base, causes the path to the opposing team's flag
                          to open up.
                PAL:   16: Brown (you must set the flag's palette)
                       17: Gray
                       18: Purple
                       19: Red
                       20: Yellow
                       21: Olive
                       22: Green
                       23: Blue

        A level can have multiple flags of any type or color, allowing for a
        variety of possibilities, including up to eight teams. NOTE: A flag
        will automatically tag the sector it's in with a sector
        hitag 9000, and a sector lotag equal to the flag's palette. You
        can create a scoring sector anywhere in the map in addition to the
        flag's sector just by using these tags.

^P page 9
^3------------------------------------------------
^3Shadow Warrior Wall and Sector Tagging Reference
^3Compiled And Edited By Keith Schuler
^3(c) 1997 3D Realms Entertainment
^3------------------------------------------------

This document is your reference guide to using the sector and wall tags
in Shadow Warrior, including sector objects. Some examples of these tags
can be found in EXAMPLE.MAP, so be sure to check that map out. You'll find
it in the \GOODIES\TOOLS directory on your Shadow Warrior CD.

Refer to these documents in the \GOODIES\DOC directory on your Shadow
Warrior CD for other important information:

ADVANCED.TXT - Brief explanations of room-over-room, sector objects, and
other advanced Shadow Warrior mapping topics.
EDITART.TXT  - Instructions and reference for using the EDITART program.
EXAMPLE.TXT  - Documentation to accompany EXAMPLE.MAP, which includes
demonstrations of almost all of Shadow Warrior's map functionality.
SLABSPRI.TXT - Instructions and reference for using the SLABSPRI program.
SWSOUNDS.TXT - An index of the sound effects and ambient sounds.
SPRITAGS.TXT - Sprite tagging reference. Your guide to all the special
sprites in Shadow Warrior and how to use them.
SWBUILD.TXT  - A tutorial and reference guide to using the BUILD editor.
WALLTAGS.TXT - Wall and sector tagging reference. These are all the wall and
sector tags used in Shadow Warrior.
^3-----------------------------------------------------------------------------


^3 --------
^3 Contents
^3 --------

Sector Tags                                             1
        Sector Triggers                                 1.1
                43. TAG_TRIGGER_MISSILE_TRAP
                116. TAG_LEVEL_EXIT_SWITCH
                206. TAG_SECTOR_TRIGGER_VATOR
                210. TAG_LIGHT_TRIGGER
                211. TAG_TRIGGER_EVERYTHING
                212. TAG_TRIGGER_EVERYTHING_ONCE
                216. TAG_SPAWN_ACTOR_TRIGGER
                217. TAG_SECRET_AREA_TRIGGER
                240. TAG_SPRING_BOARD
        Sine wave floor or ceiling                      1.2
                400. TAG_SINE_WAVE_FLOOR
                420. TAG_SINE_WAVE_CEILING
                440. TAG_SINE_WAVE_BOTH
        Sector Object Tags                              1.3
                501. TAG_OBJECT_CENTER

Wall Tags                                               2
        Sine wave wall effect                           2.1
                300. TAG_WALL_SINE_Y_BEGIN
                301. TAG_WALL_SINE_X_BEGIN
                302. TAG_WALL_SINE_Y_END
                303. TAG_WALL_SINE_X_END
        Other Wall Tags                                 2.2
                305. TAG_WALL_CLIMB
                306. TV_CAMERA_SCREEN
                307. TAG_WALL_BREAK
                900. TAG_WALL_PLAY_SOUND
        Sector Object Wall Tags                         2.3
                500. TAG_WALL_LOOP_DONT_SPIN
                501. TAG_WALL_LOOP_REVERSE_SPIN
                502. TAG_WALL_LOOP_SPIN_2X
                503. TAG_WALL_LOOP_SPIN_4X
                504. TAG_WALL_LOOP_OUTER
                507. TAG_WALL_LOOP_DONT_SCALE
                508. TAG_WALL_LOOP_OUTER_SECONDARY
                550. TAG_WALL_ALIGN_SLOPE_TO_POINT

^3-----------------------------------------------------------------------------

^3 -------------------
^3 1.      Sector Tags
^3 -------------------

Many things can be done in Shadow Warrior using sector tags. In general, the
sector's lotag is used to identify the effect the sector will produce, while
the hitag is used to supply supplemental information like a match tag or a
track to follow.

^3 1.1     Sector Triggers:

A "trigger" is the term in Shadow Warrior for a sector that triggers some
match tag event when the player steps into it, much like a switch does. In
Duke Nukem 3D, they were called "touchplates," but the general idea is the
same. The sector triggers available are as follows:

^3LOTAG 43:       TAG_TRIGGER_MISSILE_TRAP
                Hitag = Match

Shoots a fireball from a FIREBALL_TRAP (hitag 43), BOLT_TRAP (hitag 44), or
a SPEAR_TRAP (hitag 63) ST1 sprite with a lotag that matches the sector's
hitag.

^3LOTAG 116:      TAG_LEVEL_EXIT_SWITCH
                Hitag = Next level

When the player steps into this sector, the level will end. The game will
then proceed to the level listed in the sector hitag, provided the current
level has the same filename as one of the levels that came with Shadow
Warrior. For most external maps, a hitag of 0 should be sufficient.

^3LOTAG 206:      TAG_SECTOR_TRIGGER_VATOR
                Hitag = Match

Triggers a vator, spike, slidor, or rotator with a TAG2 that matches the
hitag of this sector.

^3LOTAG 210:      TAG_LIGHT_TRIGGER
                Hitag = Match

Triggers all LIGHTING (hitag 108) ST1's with a TAG2 equal to the hitag of
this sector when the player steps into it.

^3LOTAG 211:      TAG_TRIGGER_EVERYTHING
               Hitag = Match

Stepping into this sector triggers any event with a matching tag.

^3LOTAG 212:      TAG_TRIGGER_EVERYTHING_ONCE
                Hitag = Match

Stepping into this sector triggers any event with a matching tag once and
only once.

^3LOTAG 216:      TAG_SPAWN_ACTOR_TRIGGER
                Hitag = Match

Give an actor a lotag of 203, and a matching hitag, and he will not appear
normally at the map startup. Instead, he will teleport in when the player
steps on this sector.

^3LOTAG 217:      TAG_SECRET_AREA_TRIGGER

Marks a sector as a secret area.

^3LOTAG 240:      TAG_SPRING_BOARD
                Hitag = Height of the jump

Step on the sector, press the SPACEBAR, and it shoots you high into the air.
Hitag designates how high the player will jump. One example of this is the
ventilation shaft at the end of $NEWMINE.MAP.


^3 1.2     Sine wave floor or ceiling:

You can have a maximum of five of these per level. See room GA in EXAMPLE.MAP
to see how this is done. Lotag the first sector with 400, the next with 401,
and so on up to 419. The WAVE will actually flow from the opposite end.
The wave direction is what is referred to when BEGINNING and END are
referred to below.

1st sector hitag = The range in pixels the floor will undulate in the
                   Z direction
2nd sector hitag = Range decrement - takes the range from the 1st sector
                   high tag and adjusts all the rest by this decrement -
                   makes the WAVE start off small and get LARGER toward
                   the end - THIS IS IN Z COORDINATES *NOT* PIXELS
3rd sector hitag = Speed of the motion - defaults to 3 
4th sector hitag = Number of sectors from one peak (top of the curve) to the
                   next. The default is the total number of sectors in the
                   entire sine wave. (max of 20)
Last sector hitag= Special tag to make a realistic ocean wave - modifies the
                   range toward the END (greatest range is usually here) of
                   the WAVE so that it dissapates quickly. Without this it
                   would just continue to get bigger toward the end of the
                   WAVE.

^3LOTAG 400:      TAG_SINE_WAVE_FLOOR
                Hitag = Range in Z pixels floor will undulate

First sector lotag is 400, then 401, then 402, all the way up to a max of
419. Creates a sine wave on the floor. Slope the sectors to make a smooth,
sloping sine wave.

^3LOTAG 420:      TAG_SINE_WAVE_CEILING
                Hitag = Range in Z pixels ceiling will undulate

First sector lotag is 420, then 421, then 422, all the way up to a max of
439. Creates a sine wave effect on the ceiling.

^3LOTAG 440:      TAG_SINE_WAVE_BOTH
                Hitag = Range in Z pixels both floor and ceiling

First sector lotag is 440, then 441, then 442, all the way up to a max of
459. Creates a sine wave effect both on the floor and on the ceiling.


^3 1.3     Sector Object Tags:

Sector objects (SO's) are groups of sectors that can be moved around together
as a unit. All SOs must have at a minimum:

1. Bounding sprites (upper left and lower right) that form an imaginary
   rectangle to contain all sectors and sprites to be moved.
   ST1 SECT_SO_BOUNDING tags 500-600 are used for this.
2. A sector marked as the center of the SO.
3. An outer wall loop which forms an unbroken single sector that entirely
   encircles the sector object. One of the walls in this loop must have a
   lotag of 504.

Sector lotags 500-596 are set reserved for sector objects. There is a
maximum of 20 SO's per level. Lotags 500-501 correspond to object 0,
505-506 to object 1, 510-511 to object 2, and so on, just like the
SECT_SO_BOUNDING ST1 sprites.

^3LOTAG 501:      TAG_OBJECT_CENTER
                Hitag =    -1: Don't follow a track
                         0-94: Track to follow
                           95: Killable Sector Object
                           96: Auto turret
                           98: Operational

^3LOTAG 501 tags the center sector of SO 0, while 506 would tag the center of
SO 1, and so on. The center sector lotag will always be the same as the
lower bounding sprite hitag. The sector hitag defines how the sector object
will behave.


^3 -----------------
^3 2.      Wall Tags
^3 -----------------

Several things can be done in Shadow Warrior using wall tags. In general, the
wall's lotag is used to identify the effect the wall will produce, while
the hitag is used to supply supplemental information like a match tag.

^3 2.1     Sine wave wall effect:

You can have a maximum of 5 of these per level. Lotag the first wall to sine
wave with 300, the last one with 302. Look in room GB in EXAMPLE.MAP to see
how to do this.

1st wall hitag = Range
2nd wall hitag = Speed
3rd wall hitag = A distance from one peak (top of curve) to the next

^3LOTAG 300:      TAG_WALL_SINE_Y_BEGIN
                Hitag = Range

        Use this to start a sine wave effect on a horizontal wall. Sine wave
        will travel along the wall until it encounters a lotag 302.

^3LOTAG 301:      TAG_WALL_SINE_X_BEGIN
                Hitag = Range

        Use this to start a sine wave effect on a vertical wall. Sine wave
        will travel along the wall until it encounters a lotag 303.

^3LOTAG 302:      TAG_WALL_SINE_Y_END

        End a sine wave wall effect.

^3LOTAG 303:      TAG_WALL_SINE_X_END

        End a sine wave wall effect.


^3 2.2     Other Wall Tags:

^3LOTAG 305:      TAG_WALL_CLIMB

        Climbable wall, used with SPRI_CLIMB_MARKER (hitag 30) ST1. You may
        only use this walltag on a red wall. Ladders aren't allowed on
        white walls.

^3LOTAG 306:      TV_CAMERA_SCREEN
                Hitag = Match

        Use this walltag only on a mirror. The hitag is a match equal to the
        TAG2 of a MIRROR_CAM (hitag 1000) ST1. Allows a mirror to display
        the view of the camera instead of a reflection.

^3LOTAG 307:      TAG_WALL_BREAK
                Hitag = Match

        Used in conjunction with BREAKABLE (hitag 132) ST1. Marks a wall as
        being breakable. The wall's hitag is equal to the BREAKABLE ST1's
        TAG2.

Hitag 900:      TAG_WALL_PLAY_SOUND
                Lotag = Sound effect #

        Notice that the hitag is 900, not the lotag! When the player presses
        SPACEBAR against this wall, the sound effect designated by the lotag
        will be played.

^3 2.3     Sector Object Wall Tags:

These are mainly for sector objects that rotate. Tag ONE wall of the loop to
obtain the desired effect. See room FD in EXAMPLE.MAP for an example of how
to use this kind of walltag.

^3LOTAG 500:      TAG_WALL_LOOP_DONT_SPIN

        This wall loop will not spin along with the rest of
        the sector object.

^3LOTAG 501:      TAG_WALL_LOOP_REVERSE_SPIN

        This wall loop will spin in the opposite direction of the rest of
        the sector object.

^3LOTAG 502:      TAG_WALL_LOOP_SPIN_2X

        This wall loop will spin two times as fast as the rest of the
        sector object.
        
^3LOTAG 503:      TAG_WALL_LOOP_SPIN_4X

        This wall loop will spin four times as fast as the rest of the
        sector object.

^3LOTAG 504:      TAG_WALL_LOOP_OUTER

        All sector objects use this. Tags the outermost bounding wall loop of
        the sector object.

^3LOTAG 507:      TAG_WALL_LOOP_DONT_SCALE

        Tag one wall in a loop you don't want to scale with the rest of the
        sector object.
        
^3LOTAG 508:      TAG_WALL_LOOP_OUTER_SECONDARY

        Rectangular clipping doesn't work too well if you've got an
        operational sector object in a stacked sector area. Use lotag 508
        on the secondary sector object instead of the usual 504 to make
        rectangular clipping behave. See the driveable boat in $YAMATO.MAP
        for an example of how to use this.

^3LOTAG 550:      TAG_WALL_ALIGN_SLOPE_TO_POINT

        See room ED in EXAMPLE.MAP for an example of this. Used to make all
        slopes in a sector object align to a single point, usually as the
        point moves up and down.

^P page 10
-----------------------------------------
Shadow Warrior BUILD Editor Documentation
Compiled And Edited By Keith Schuler
(c) 1997 3D Realms Entertainment
-----------------------------------------

旼컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴커
?This information is provided as is.  It is very possible to corrupt  ?
?your copy of Shadow Warrior, so make backups!!!  3D Realms & Apogee  ?
?cannot and will not support the use of this program.  If you choose  ?
?to use it, you do so on your own.  We cannot help with questions     ?
?about this program or its use.                                       ?
읕컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴컴켸

IN ORDER TO USE BUILD, YOU MUST COPY THE ENTIRE CONTENTS OF YOUR
\GOODIES\TOOLS DIRECTORY FROM THE CD-ROM TO THE DIRECTORY YOU HAVE
SHADOW WARRIOR INSTALLED TO ON YOUR HARD DRIVE. BUILD WILL NOT WORK
CORRECTLY UNLESS YOU DO THIS! SEE INSTALL.TXT FOR MORE INFORMATION.

This document was designed to help you learn to use the BUILD map editor
included with Shadow Warrior. The first part, "Shadow Warrior BUILD
Tutorial," is a tutorial to help you create your own Shadow Warrior levels
right away, and is primarily intended for beginners. If you are already
familiar with the Duke Nukem 3D BUILD editor, then you may wish to skip to
the second part, "Shadow Warrior BUILD Reference." This is a reference guide
to the controls used in Shadow Warrior BUILD. There are several minor
differences between Shadow Warrior and Duke Nukem 3D mapping, and this
section will help you get acquainted with them.

Refer to these documents in the \GOODIES\DOC directory on your Shadow
Warrior CD for other important information:

ADVANCED.TXT - Brief explanations of room-over-room, sector objects, and
other advanced Shadow Warrior mapping topics.
EDITART.TXT  - Instructions and reference for using the EDITART program.
EXAMPLE.TXT  - Documentation to accompany EXAMPLE.MAP, which includes
demonstrations of almost all of Shadow Warrior's map functionality.
SLABSPRI.TXT - Instructions and reference for using the SLABSPRI program.
SWSOUNDS.TXT - An index of the sound effects and ambient sounds.
SPRITAGS.TXT - Sprite tagging reference. Your guide to all the special
sprites in Shadow Warrior and how to use them.
SWBUILD.TXT  - A tutorial and reference guide to using the BUILD editor.
WALLTAGS.TXT - Wall and sector tagging reference. These are all the wall and
sector tags used in Shadow Warrior.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Table of Contents
-----------------------------------------------------------------------------

I. PART 1: Shadow Warrior BUILD Tutorial

The BUILD Editor And Basic Level Editing:                       1
        Two Editing Modes: 2D and 3D                            1.1
        Level Basics: Sectors, Walls, Vertices, and Sprites     1.2
                Sector, Wall, and Sprites Attributes            1.2.1
        2D Editor Mode                                          1.3
                2D Grid and Resizing the Grid                   1.3.1
                2D Grid Locking Feature                         1.3.2
                2D Zooming In and Out                           1.3.3
        3D Editing                                              1.4

Building A Basic Level:                                         2
        Sectors and Walls                                       2.1
        Build a Simple Sector                                   2.2
                Start up BUILD                                  2.2.1
                Make Your First Sector                          2.2.2
                Backtracking in Line Draw Mode                  2.2.3
        Single-sided and Double-sided Walls                     2.3
        Placing the Player's Start Position (IMPORTANT)         2.4
        Quitting BUILD and Saving, Loading, Renaming Levels     2.5

Building A Better Level:                                        3
        Modifying Wall, Floor, and Ceiling Textures             3.1
                Selecting Textures                              3.1.1
                Shading Textures                                3.1.2
                Resizing Textures                               3.1.3
                Panning Textures                                3.1.4
                Relative Textures (Floors/Ceilings)             3.1.5
                Parallax Floors and Ceilings                    3.1.6
        Splitting and Removing Walls                            3.2
        Resizing and Moving Sectors                             3.3
        Altering Floor and Ceiling Heights...and Textures again 3.4
        Splitting, Joining, Adding, and Deleting Sectors        3.5
                Splitting Sectors                               3.5.1
                Joining Sectors                                 3.5.2
                Adding a Sector                                 3.5.3
                        Adding an Independent Sector            3.5.3.1
                        Adding an Extension Sector              3.5.3.2
                        Adding a Sector in a Sector (island)    3.5.3.3
                        Adding a Sector in a Sector (peninsula) 3.5.3.4
                Deleting a Sector                               3.5.4
        Incremental Backups of Your Level                       3.6

Sprites:                                                        4
        Adding Sprites                                          4.1
                Adding Weapons and Goodies                      4.1.1
                Adding Bad Guys                                 4.1.2
                        Bad Guy Frames                          4.1.2.1
        Modifying Sprites                                       4.2
                Resizing and Shading Sprites                    4.2.1
        Making Copies of Sprites                                4.3
        Moving Sprites                                          4.4
        Deleting Sprites                                        4.5
        Flipping Sprites and Sprite Angles                      4.6

Advanced Sector Stuff:                                          5
        Cut-and-Pasting Sectors                                 5.1
                Within the Same Level                           5.1.1
                Between Different Levels                        5.1.2
        Overlapping Sectors                                     5.2

Miscelleanous:                                                  6
        Sector's "First" Wall and Relative Floors/Ceilings      6.1
        Slopes                                                  6.2
        Multi-Player/Co-Op Start Points                         6.3
        Multi-Play Weapons                                      6.4
        Okay, What Next?                                        6.5

II. PART 2: Shadow Warrior BUILD Reference

Description of 2 Dimensional mode (sector editing mode):        7
        Grid                                                    7.1
        Mouse Cursor                                            7.2
        Player Position                                         7.3
        Vertices                                                7.4
        Lines/Walls                                             7.5
        Sectors                                                 7.6
        Sprites                                                 7.7
        Signs                                                   7.8
        Colors                                                  7.9

Editing in 2 Dimensional Mode (Sector Editing Mode)             8
        Control in 2D Mode                                      8.1
                Mouse Control                                   8.1.1
                Keyboard Control                                8.1.2
        Keyboard Commands for 2D Mode                           8.2
                Esc Menu                                        8.2.1
                Basic 2D Editing Commands                       8.2.2
                Line and Sector Drawing Commands in 2D Mode     8.2.3
                Sprite Editing Commands in 2D Mode              8.2.4
                Group Selection Commands in 2D Mode             8.2.5
                Advanced 2D Mode Editor Functions               8.2.6

Description of 3 Dimensional mode (game view editing mode)      9
        Cursor                                                  9.1
        Frame Rate Counter                                      9.2
        Floors/Ceilings                                         9.3
        Walls                                                   9.4
        Sprites                                                 9.5

3 Dimensional mode (game view editing mode):                    10
        Control in 2D Mode                                      10.1
                Mouse Control                                   10.1.1
                Keyboard Control                                10.1.2
        Keyboard Commands for 3D Mode                           10.2
                Basic 3D Mode Editing Functions                 10.2.1
                Texture Editing in 3D Mode                      10.2.2
                Sprite Editing in 3D Mode                       10.2.3
                Shade,Visibility and Palette Editing in 3D Mode 10.2.4
                Copy and Paste Functions in 3D Mode             10.2.5
                Tagging, and Advanced 3D Mode Functions         10.2.6

Shadow Warrior Map Authoring Template:                          11

-----------------------------------------------------------------------------
I. PART 1: Shadow Warrior BUILD Tutorial
-----------------------------------------------------------------------------

----------------------------------------------
1.      The BUILD Editor & Basic Level Editing
----------------------------------------------

This section gives detailed info on several ways to edit levels in BUILD.
If you would like to see an index of everything you can do in BUILD, please
see "PART 2: Shadow Warrior BUILD Reference."


1.1     Two Editing Modes: 2D and 3D

There are two modes with which to make your levels: 2D and 3D. 2D mode is a
2 dimensional view of your level and making a level in this mode is like
drawing on grid paper. 3D mode is 3 dimensional and is similar to the game
itself (switches, doors, some light effects, etc. don't work like in
the game).

Switching between the two modes is done with the Enter key on the numeric
pad (*not* the Enter key near all the regular keys).  When in 2D mode, you're
current position within the level is indicated by the white arrow.  The brown
arrow, if you can see it, is the player's starting position when the game
begins (this is explained later).

NOTE: Your current location (white arrow) must be within a valid sector
to enter 3D mode.


1.2     Level Basics: Sectors, Walls, Vertices, and Sprites

Your level will be made of a few basic elements: sectors, walls, vertices,
and sprites.  Sectors are like rooms and hallways and outside areas.  Sectors
are made up of a floor, a ceiling, and walls.  Walls are just that - wall
space between the floor and the ceiling of a sector.  The two points on
either side of the wall, as seen in 2D mode (seen as corners in 3D mode), are
its vertices.

Sprites are used for bad guys, goodies, sector effectors, etc..  They can
also be made to lay flat on walls, floors, and ceilings.  These flattened
sprites can be used for switches, blood splats, and decorations. 

        1.2.1   Sector, Wall, and Sprites Attributes

        You can see the attributes (shade, tags, tile number, etc.) of
        sectors in 2D mode by pointing at them and hitting the TAB key.
        You can do the same for walls and sprites with the Alt-TAB keys.
        (NOTE: Alt-TAB is by default a Windows 95 system key. If you are
        using BUILD in an MS-DOS box under Windows 95, you may wish to
        uncheck the Alt-TAB key in your MS-DOS box properties.)
        Since walls can be double-sided, make sure you point on the exact
        side of the wall before hitting Alt-TAB.

1.3     2D Editor Mode

2D mode editing is used to lay out the basic level.  It provides you with
a top view of your level and shows your level's walls and sprites on a grid.
It is very similar to a blueprint and most of a level's preliminary work is
done in this mode.

When editing in 2D mode, use the left mouse button to grab things (vertices,
sprites) and move them around the map.  Use the right mouse button to move
your current position around the map.

You'll notice, in 2D mode, that the closest sprite, the closest vertex,
and the closest wall to the white arrow will blink.  This indicates that
these particular objects will be acted upon by you.  This will be more
important later when you start using high and low tags, and hit scan/
blocking.  For now, though, you need to know that the blinking vertex is
the one you'll grab if the mouse's left button is used.

        1.3.1   2D Grid and Resizing the Grid

        There are seven gradations to the 2D mode's grid.  The first six will
        actually display a grid of six varying sizes and a seventh with no
        grid at all.  The six grid sizes give you varying control and
        accuracy on sector wall and sprite placement.  Detailed work on very
        small spaces or tight sprite locations can be done at the sixth,
        finest grid size, while more grand, room-sized leveling can be done
        with the larger grid sizes.  The seventh, gridless display is usually
        only used to capture screen shots of levels for printing and
        planning.

        1.3.2   2D Grid Locking Feature

        When drawing walls or placing sprites in 2D mode, you'll notice that
        the wall's vertices, and the sprites, are placed exactly on grid
        cross lines. This is very useful because almost everything you BUILD
        will be rectilinear (square-shaped).  You will also want to keep
        areas symmetrical and proportioned with respect to sector sizes for
        rooms, doors, windows, etc..

        We don't recommend turning Grid Lock Mode off until you feel
        comfortable with BUILD and level designing.  When you want to make
        crazy shapes with your sectors, or place sprites so precisely that
        they need to be off the grid system, then use the "G" key to enable
        and disable the Grid Lock feature.

        1.3.3   2D Zooming In and Out

        You can zoom in and out within the 2D mode by using the "A" key to
        zoom in, and the "Z" key for zooming out.  These two keys, along with
        grid resizing, can greatly help when trying to develop differently
        sized areas of your maps.

1.4     3D Editing

The 3D mode of editing is used to do most of your level's designing. This
mode resembles the actual game and therefore is more intuitive.  You
will do your tile selections, shading, floor/ceiling elevations, etc. in
3D mode.

Holding the left mouse key after pointing at a sprite, wall, floor, or
ceiling in 3D mode will hold it as selected, even if the sprite moves beyond
the mouse's crosshair during an editing operation.

There three ways to control your altitude in 3D mode: Game Mode, Height
Lock Mode, and Float Mode.  Game Mode is just like the game; you will be
affected by gravity.  Height Lock Mode will let you move around the level
with no gravity and always at the same height above the current floor.  Float
Mode will let you hover without gravity and your height will not be effected
by the floor's height below.

You can switch between these modes by hitting the CapsLock key.  You can
change your altitude by hitting the "A" and "Z" keys.


------------------------------
2.      Building A Basic Level
------------------------------

2.1     Sectors and Walls

A sector is the simplest and most fundamental of structures in your level.
It is made of walls, a floor, and a ceiling.  You can control everything
about each sector including its size and shape, the height of its floor and
ceiling, the textures of its walls, and its shading and visibility.


2.2     Build a Simple Sector

        2.2.1  Start up BUILD

        At the DOS prompt and within your Shadow Warrior directory, type the
        following:  YOU MUST BE IN THE DIRECTORY BUILD IS IN TO DO THIS!

        BUILD <map name>

        If it's a new level, you'll start in 2D mode with an empty grid.  If
        the level already exists, then you'll start in 3D mode at the
        player's start point.


        2.2.2   Make Your First Sector

        If you're not already there, go to 2D mode (numeric pad "ENTER" key).
        Make a square sector by pointing the mouse at a starting point for
        the first wall of the sector and hit the SPACE bar.  You are now in
        Line Drawing Mode and you will notice that a white line is now
        following your mouse movements.

        Drag the mouse to a second point where you want the first wall to end
        and hit the SPACE bar again.  Continue in this fashion until a square
        is made with last point's position being exactly where the first
        point was put.  Line Drawing Mode will automatically stop when the
        last point is connected to the first and your first sector is now
        complete!  ...it's a milestone, so enjoy it ;)

        Go ahead and check out your new sector by placing the mouse's white
        arrow inside the new sector and hit the numeric ENTER key.  That's
        it, your new sector.  Check the size of the 3D view and compare it to
        the 2D view so you can get a feel for the grid size in 2D relative to
        the actual area it creates.

        The size of the sector can be changed (bigger, smaller) in 2D mode by
        grabbing the vertices with the left mouse button and dragging them.
        You can select more than one vertex by first positioning the mouse 
        pointer and holding the right SHIFT key and moving the mouse. This
        will create a purple "rubber band" with which to select multiple
        vertices and sprites. Release the SHIFT key and the surrounded items
        will flash, indicating that they have been selected. Point to any
        of the flashing items and hold the left mouse button, then move the
        mouse. All of the selected sprites and vertices will move together.
        Press the Right SHIFT key again to un-select these items.

        The walls will be a bright gray stone tile if the map is a new one.
        The walls will be the last defaulted wall if the map is not new.
        We'll change the textures later, right now it's back to 2D mode
        (numeric ENTER key)...

        2.2.3   Backtracking in Line Draw Mode

        If you make a mistake while in Line Draw Mode and want to backtrack
        a line or more, then simply hit the Backspace key.  You'll see the
        last placed point erased and the line it made removed.  You can
        completely undo all your lines and cancel Line Draw Mode by
        backspacing all the way back to the first point.


2.3     Single-sided and Double-sided Walls

You'll notice, upon returning to 2D mode, that your sector is made of
white lines.  These white lines are single-sided walls.  A single-sided wall
only has player space on one side; the other side is "null" and can never be
occupied by the player or anything else.  Your new sector has player space on
the inside, but not on the outside.

Double-sided walls are red in 2D mode and they have player space on both
sides.  Double-sided lines always separate two sectors.  We'll add more
sectors to our one-sector level in a bit.


2.4     Placing the Player's Start Position (IMPORTANT)

It is important to make sure that the player's start position, indicated
by a brown arrow in 2D mode, is within a sector (user space).  The game will
not run properly if it tries to start the player in null space.

Place the player's start position by putting the mouse, and the white
arrow, where you want and hit "Scroll Lock".  The brown arrow will now be
there (you'll have to move the mouse a bit to see it).  The player's starting
direction will be the same as the brown arrow's.


2.5     Quitting BUILD and Saving, Loading, Renaming Levels

It's ALWAYS a good idea to test your level in stages as it grows.  Don't
try to take on too much in any one editing session.  Let's stop here and load
your new level into the game.  Even this simple level will make you utter
"Cooool, I built this!" when you see it in the game.

Exit BUILD by hitting the "Esc" key in 2D mode.  You can do a couple of
things here.   We want to quit with the "Q" key and save our level by hitting
the "Y" key when it asks.

You can also simply save your level to disk with the "S" key and return
immediately to BUILD.  We recommend that you do this often as you build more
complicated levels.  You will often want to backtrack away from an idea and
reloading a previous version of your level is much easier than undoing the
idea.

Although you don't need to now, in the future you will want to load in
different levels during a single BUILD session.  This can be done by hitting
the "L" key and selecting the level from the list.

Finally, you can rename your level by hitting the "A" key and providing
the new name.


-------------------------------
3.      Building A Better Level
-------------------------------

Let's make our single-sectored, ugly-textured level a little better.  We
can start adding rooms and splitting sectors but, first, let's fix those
textures.

3.1     Modifying Wall, Floor, and Ceiling Textures

        3.1.1   Selecting Textures

        Go to 3D mode and point at a wall in your sector.  Hit the "V" key
        and a screen will appear with textures.  If this is your first level,
        then only that gray stone texture will be showing.  This first screen
        of textures are all the ones that have been used in the current
        level. Hit the "V" key again and the screen will fill with the
        complete texture set.

        Look for a texture that's cool and one that fits the level's motif.
        You can peruse the textures with the arrow keys and PgUp/PgDn keys.
        You can also go directly to a texture if you know its number.  Hit
        the "G" key and enter the tile number.  This will be more helpful
        later when you know where everything is.

        Do the same for the other walls; or, if the same texture is to used
        on all four walls (do this for now), simply point at the first wall
        (3D mode), hit the TAB key, point at other walls, and hit the ENTER
        key on each.

        Select a texture for the ceiling and floor by first pointing to each
        in 3D and then hitting the "V" key just as you did with the walls.
        Again, the first screen will be the ceiling/floor textures already
        used in this level and, by hitting the "V" key a second time, you
        can get to all the textures.

        Floor and ceiling texture sizes *must* be a factor of 8 pixels in
        size to look right.  Most floor and ceiling textures are 64x64 or
        128x128 pixels in size.  You'll notice a weird effect after selecting
        a texture that's not proportioned correctly.

        3.1.2   Shading Textures

        Walls, ceilings, and floors can be shaded individually by pointing at
        each and hitting the numeric pad's "-" and "+" keys in 3D mode.
        Shading a level can take tons of time and it is crucial to any good
        level to have good shading.  Don't spend too much time with it right
        now; you can fine-tune the level later. ;)

        3.1.3   Resizing Textures

        The size of a texture can be changed (X and Y repeats for walls,
        "expansion" and "compression" for floors and ceilings).  Like
        shading, you shouldn't do much more than play with this feature for
        now.

        To change the size of wall textures, point at each in 3D mode and hit
        the numeric pad's 2, 4, 6, and 8.  You can see the texture expand and
        shrink.  If you want to go back to the default repeat value, point at
        the wall and hit the "/" key.  This will reset most of the wall's
        attributes to their defaults.

        The effect of the numeric pad's "2", "4", "6", and "8" keys can be
        incremented by a factor of four by holding the numeric pad's "5" key
        down while hitting these keys.

        To change the size of floor and ceiling textures, point at each and
        hit the "E" key.  Floors and ceilings only have two sizes: "expanded"
        and "compressed" (the numeric pad's keys will not function).

        3.1.4   Panning Textures

        Textures can be panned by pointing at the them in 3D mode and hitting
        the Shift key and the numeric pad's "2", "4", "6", and "8".  You'll
        see the texture shifting along in the direction of the numeric key.
        Similar to texture sizing, you can hold the numeric pad's "5" key
        down while hitting these keys to resize texture in increments of
        four.

        You shouldn't need to play with this feature too much for now and we
        really only mention it early in case you've accidentally hit the
        numeric pad without the "Shift" key (resizing texture) and wondered
        what the heck happened to the texture.

        3.1.5   Relative Textures (Floors/Ceilings)

        A floor's/ceiling's texture can be oriented relative to a specific
        wall. This can get a little confusing and we suggest you put it off
        until later.

        When you've finished this section, go ahead and make a triangular
        sector and play with the floor's relative alignment by pointing at
        the floor near one of the walls (in 3D mode) and hitting the
        Alt-F keys.  Go over to another wall and hit Alt-F again.
        ...cool, eh?

        3.1.6   Parallax Floors and Ceilings

        To make a ceiling texture look like an arching sky, point at it in 3D
        mode and hit the "P" key. Most textures won't look good when set to
        parallaxing;  it's best to use the textures intended for parallaxing.
        Floors can also be parallaxed for a weird effect. Parallax skies never
        look quite right in the BUILD editor. You have to run the game to see
        the parallax sky working correctly. Shadow Warrior also provides ways
        to alter the behavior of parallax skies, but that will be addressed
        elsewhere.

        Things can get a little tricky once a ceiling or floor has been set
        to parallaxing.  When you start adding more sectors to your level,
        especially ones that involve parallaxed ceilings/floors, some walls
        will disappear or look weird in 3D mode.  It's hard to explain in
        text here, but you'll see what we mean and you'll see what to do to
        muscle your way through.

        3.1.7   Orienting Walls to the Floor or Ceiling

        Walls will either be oriented to the sector's floor or its ceiling.
        You can change the wall's orientation by pointing at it and hitting
        the "O" key. The orientation of the wall determines whether the
        wall's tile moves with the floor or the ceiling.  To play with this,
        simply point at a floor in your map and watch the wall as you raise
        and lower the floor with the PgUp/PgDn keys.  Now point at the wall
        and hit the "O" key.  Change the floor's elevation again and watch
        the wall.  Notice that the wall tile moved with the floor in one case
        and didn't in the other.  This will be more important when you start
        using moving sectors.


3.2     Splitting and Removing Walls

You can split a wall into two, smaller walls (for texture changes, shading,
etc.) in 2D mode.  To split an existing wall into two walls, point at the
desired location along the wall and hit the Insert key.  A new vertex will be
added along the wall.

A split in a wall can be removed by dragging the undesired vertex to one of
its neighbor vertices with the mouse's left button.  This will remove the
vertex and thus make a single wall of the original two.


3.3     Resizing and Moving Sectors

Remember, you can resize the sectors of your level in 2D mode and the left
mouse button.  Also, you can grab more than one vertex when doing this.
Position the white arrow above and to the left of the desired group of
vertices.  Hold the Right-Shift key down and you'll see a purple box grow and
shrink as you move the mouse.  Make a box big enough to surround all of the
desired vertices and release the Right-Shift key.  The selected vertices will
all blink now and you can move them all by moving one.  To un-select the
vertices, simply hit the Right-Shift key again.  Multiple sprites can be
selected and moved like this, too.

You can move entire sector groups by Right-Shifting them, but be careful to
notice that this moves the sector(s) by the vertices.  If not all vertices
are selected, then some of the sectors can get deformed and twisted.

If you want to move sectors without regard to their vertices, then you can
can them with the Right-Alt key.  A box similar to the Right-Shift selection
one will appear.  This box will be green.

You will have to play with the two selection features, Right-Shift and
Right-Alt, to get a feel for their differences.  Save this for later.


3.4     Altering Floor and Ceiling Heights ...and Textures again

You can raise and lower floors and ceilings by pointing at each, in 3D
mode, and hitting the PgUp/PgDn keys.  You can also, now, change the texture
of the different floors and ceilings with the "V" key.


3.5     Splitting, Joining, Adding, and Deleting Sectors

We're now ready to split, add, and delete sectors.  From here you will be
able to add rooms, windows, doors, whatever to your level.  Most of this
designing will be in 2D mode and keep Grid Locking "ON".

        3.5.1   Splitting Sectors

        Let's split our single-sectored level into a two-sectored room.
        Add a vertex to two of the opposing walls in the sector; that is,
        split two of the walls.  Point at either of these two new
        vertices and hit the Space bar. You are in Line Drawing mode and
        should point the mouse at the other new vertex and hit Space bar.
        Your original sector is now split into two.  Go into 3D mode for
        a moment and play with the two different floors and ceilings.

        3.5.2   Joining Sectors

        You can join the two new sectors back into their original single
        sector by pointing at one of the sectors in 2D mode and hitting
        the "J" key. At this point you can cancel the join operation only
        by going into 3D mode. If you do want to join two sectors, point
        to the second sector and hit the "J" key again.

        3.5.3   Adding a Sector

        In effect, we added a sector when we split the original sector just
        before.  There are a few more ways that we can add sectors to our
        level.  We can create a new, stand-alone sector independent of an
        existing one, we can add a new sector along the outside of an
        existing one, and we can make a sector inside an existing one.

                3.5.3.1   Adding an Independent Sector

                To add a new, independent sector to your level, simply follow
                the stages that you did above.  You can decide to connect
                independent sectors later, if you wish.

                3.5.3.2   Adding an Extension Sector

                You can add a new extension to your level by starting Line
                Drawing at one of the vertices in 2D mode.  Draw three lines,
                outside the original sector, with the third ending at the
                vertex on the original sector such that a square is made by
                the three new lines and one of the lines in the original
                sector. Notice the line between the two vertices of the first
                sector has turned red indicating that it now separates two
                sectors.  The original single-room sector is now bigger and
                made of two sectors.

                3.5.3.3   Adding a Sector within a Sector (island)

                Draw a sector within an existing sector the same way you did
                with the original sector.  When the four walls are connected
                and the inner sector is established, it will be made of
                single-sided (white) walls.  This means that the space inside
                the new sector is null and the original sector is now
                doughnut-shaped. 

                If you want to make an actual sector-in-a-sector, then
                position the mouse cursor inside the inner sector and hit
                Alt-S.  This will change the inner sector into valid
                player space.

                3.5.3.4   Adding a Sector within a Sector (peninsula)

                You will probably need to insert connection points for the
                new sector. Add the new sector by starting at one of the
                newly inserted vertices and drawing 3 lines inside the
                original sector, ending at the other newly added vertex.
                This new sector will automatically be made of double-sided
                lines and the new sector will be a valid sector.

        3.5.4   Deleting a Sector

        You can delete a sector, in 2D mode, by placing the white arrow in
        it and hitting the Ctrl-Delete keys.  Be careful!  There is no
        "undo" feature in BUILD, so its usually a good idea to do a quick
        Esc-and-Save before deleting sectors.


3.6     Incremental Backups of Your Level

As your level gets bigger and more complicated, I highly recommend that
you quit and save it in it's growing versions as you go.  That is, use the
"Save (A)s" feature to give your map incremental filenames. For instance,
while working on the Bath House map, I saved my working copies as BATH1.MAP,
BATH2.MAP, and so on. The final version I renamed $BATH.MAP. It's a good idea
to make progressive, incremental backup copies of a level at least once an
hour.  With these backup copies, not only can you backtrack to previous
versions of a level if an idea goes bad, but you can also try different
variations of the same level.

You should play with sectors now and get a good feel for their basic
layout.  Try adding rooms and hallways.  Change some floor and ceiling
heights.  Play with the textures.  Next we'll start adding sprites (weapons,
goodies, bad guys, etc.) and you can actually "play" your level.


----------
4. Sprites
----------

Sprites are used for bad guys, weapons, ammo, goodies, switches, and
decoration.  You probably noticed while you were looking for wall textures
before, that the art work for these things were there, too.  When you start
adding sprites, take a look around within the textures again; there are lots
of sprites and they're often good for inspiring ideas for the level.

In 2D mode, sprites will appear as little dots with a tail.  If the sprite
has a name assigned to it, such as "shotgun", this will be displayed if you
are zoomed in enough.  The tail of the sprite tells you its orientation.  The
sprite will point in the direction of the tail when it's initiated by the
game.


4.1     Adding Sprites

You will usually use 2D mode for sprite placement because it's more
accurate and seems more convenient with a top view.  Go to 2D mode, point at
a place for the sprite and hit the "S" key.  The "S" key will work in 3D mode
in the same way - point at the spot on the floor or ceiling where you want
the sprite and hit "S".

Go to 3D mode and look at the sprite.  If this is a new map, or at least
one without any sprites, you won't see it. This is a mysterious quirk of
Shadow Warrior BUILD. Return to 3D mode and press "ESC" to bring up the ESC
menu. Press "Q" to quit, and press "Y" when prompted to save. Once in DOS,
run BUILD again and reload your level. Now, when you enter 3D mode, you'll
be able to see your sprite. It will appear as the default gray stone texture.
You can select the right texture for the sprite in the same way that you
selected wall textures.

Point at sprite hit the "V" key.  The first screen are the sprites already
used in current map and hitting the "V" key again will show all the textures.
Use the arrow keys and PgUp/PgDn to move around the textures and hit Enter
when you see the one you want.

You can leave the sprite on the floor or move it up and down with the
PgUp/PgDn keys in 3D mode.  Ctrl-PgUp and Ctrl-PgDn, while pointing at the
sprite, will put the sprite directly on the ceiling or floor, respectively.


        4.1.1   Adding Weapons and Goodies

        You'll find all of the weapons, ammo, and goodies starting at texture
        1765. Select one of these.

        4.1.2   Adding Bad Guys

        The bad guys are scattered arbitrarily throughout the textures set.
        You'll notice, when you find them, that all of the poses of each
        character is there.  When placing a bad guy, you'll usually be using
        his first walking frame. If you use the wrong frame, then the actor
        won't animate when you run the game.

                4.1.2.1   Bad Guy Frames

                You will usually select the first sprite texture (called a
                "frame" because these frames are used to animate the bad guy
                within the game) for the bad guy. This is not always the
                case, however. Here is a quick reference list of the correct
                frames to use for bad guys in Shadow Warrior:

                Tile # / Actor
                800    - Hornet
                817    - Bouncing Betty
                820    - Accursed Head
                1210   - Sumo Boss
                1300   - Serpent Boss
                1400   - Coolie
                1441   - Coolie Ghost
                1469   - Green Guardian
                1580   - Little Ripper
                3780   - Fish
                4096   - Evil Ninja
                4162   - Crouching Evil Ninja
                4320   - Big Ripper
                5162   - Female Warrior
                5426   - Zilla Boss


4.2     Modifying Sprites

        4.2.1   Resizing and Shading Sprites

        The size of the sprite can be changed by pointing at it in 3D mode
        and hitting the "2", "4", "6", and "8" keys on the numeric pad just
        the way you did to resize wall textures.  You will probably want to
        resize most of the sprites to what looks good to you, but beware,
        always be consistent and keep all similar sprites the same size
        throughout the level.

        You can also shade the sprite in 3D mode with the "-" and "+" keys on
        the numeric pad.  It's usually a good idea to keep the shade setting
        at zero and let the sector's shade take control during the game,
        except in certain special cases, like a light sprite or fire.


4.3     Making Copies of Sprites

If you want to make exact copies of a sprite, you can point at it in 3D mode,
hit the TAB key and now, each time you hit the "S" key to add a sprite, it
will generate a copy (size, shading, and all).


4.4     Moving Sprites

Sprites can be moved around the level in 2D mode by pointing at the sprite
and holding the left mouse button down.  Remember that more than one sprite
can be selected with the Right-Shift key.


4.5     Deleting Sprites

Sprites can be deleted in either 2D or 3D mode by pointing at it and
hitting the Delete key.


4.6     Flipping Sprites and Sprite Angles

You can flip the sprite's texture in 3D mode by pointing at it and hitting
the "F" key.


------------------------
5. Advanced Sector Stuff
------------------------

As you start trying more difficult level designing, keep in mind that many
of the things you want to do are already done in other levels.  You should
load some of our levels into BUILD and see how we did things.  There are tons
of tricks and neat things in BUILD, and we can't mention most of them here.


5.1     Cut-and-Pasting Sectors

You can cut-and-paste a sector or group of sectors.  This can save you
lots of time when making multiple copies of doors, elevators, and other
sector gizmos.  You can also grab sections of other levels and copy them into
your current level.

        5.1.1   Within the Same Level

        Sector-select (Right-Alt key in 2D mode) the group of sectors that
        you want to copy.  While the desired sectors are blinking green,
        point the mouse within the group and hold the left button down.
        (Be careful not to move the group while holding the mouse button
        down.)  Hit the Insert key and the group of sectors will be copied.
        Keep the left mouse button depressed and move the new group of
        sectors to their new location.  When the new group is relocated,
        hit the Right-Alt key again to un-select the group.

        Notice that everything was copied: sprites, walls, tags, everything.
        You may have to re-assign switch tags and check weapons and goodies.

        5.1.2   Between Different Levels

        You can also copy sectors from one level to another.  Grab and copy
        the group of sectors the same way as described above (Right-Alt
        select group in 2D mode, hit Insert key while holding left mouse
        button down over sector group).  While the new, copied sector group
        is still blinking green, hit the Escape key and load in the second
        level.  When it is loaded into BUILD, the copied sector group will
        be overlaid and you can re-position it.

        It's always a good idea to do a quick Escape/Save after copying a
        group of sectors into another level.  After copying and positioning
        the group, un-select it (Right-Alt) and save the level.


5.2     Overlapping Sectors

BUILD will let you overlap sectors and you can do some really cool things
by doing so. Overlapping is one of the more powerful abilities of the BUILD
engine, allowing multiple floors over floors. Two extreme examples in
Shadow Warrior are Bath House and Water Torture, although you'll find minor
uses of overlapping sectors in almost every map. Two restrictions are:

1) You can never see 2 overlapping floors/ceilings in 3d mode. The sectors
   can be cut to get around this.
2) Overlapping sectors can never share a double-sided (red) wall


----------------
6. Miscelleanous
----------------

6.1     Sector's "First" Wall and Relative Floors/Ceilings.

The wall between the first two points of a sector is the sector's first
wall.  You can select the sector's first wall by pointing at the floor or
ceiling, in 3D mode, just in front of the desired wall and hitting the Alt-F
keys.  More times than not, you will not need to re-assign sector first
walls.

If you want to align the floor/ceiling textures along a specific wall,
usually to make the pattern in the texture match the direction of the wall,
you can make the floor/ceiling texture "relative".  To toggle between
relatively aligned textures and normally aligned textures, point at the floor
or ceiling in 3D mode and hit the "R" key.

You may also want to make floors/ceilings relative when you start playing
with moving sectors.


6.2     Slopes

You can slope a floor or ceiling by pointing to it with the cursor in 3D mode
and pressing the "[" or "]" keys.

You can make a slope align perfectly with the next sector's floor or ceiling
by using the Alt-[ and Alt-] keys.


6.3     Multi-Player/Co-Op Start Points.

Refer to ST1.TXT for more information regarding how to place multiplayer
and co-op start points in Shadow Warrior BUILD.

For multiplay, spread the starting positions around the level in good
places where none of the players will have an advantage over the others (near
a good weapon, etc.).  For co-op, place all the player starts right near the
single-play start position (brown arrow in 2D mode) so that the co-op team
will be together at the start of the game.

NOTE: Never forget to place a multiplayer and co-op start point for player
zero. In Shadow Warrior, this is very important, and a network game may go
out of sync if you forget.


6.4     Multi-Play Weapons

Most weapons and items, as well as switches and a few other things, can be
made to appear only in WangBang. To do this, go into 2D mode and point to the
sprite you wish to make multiplayer-only. Press F8, then select "2".
The sprite's sign will now read "MULTI." If you later decide to make the
sprite appear in solo and co-op play, repeat this process and the "MULTI"
flag will be turned off.


6.5     Okay, What Next?

That's it for this tutorial, which hopefully acquainted you with a few of
BUILD'S most basic features. Now you might want to peruse the second part
of this document, which is a complete reference guide to the BUILD editor's
functions, and contains some information not covered in the tutorial. From
there you might want to take a look at EXAMPLE.MAP, which contains simple
demonstrations of almost all of Shadow Warrior's map functionality. Also be
sure to look at ST1.TXT, which is a reference to all of Shadow Warrior's
extensive sector effector library, and TAGS.TXT, which is another
reference, to Shadow Warrior's sector and wall tags. Good luck!


-----------------------------------------------------------------------------
II. PART 2: Shadow Warrior BUILD Reference
-----------------------------------------------------------------------------

-------------------------------------------------
7.      2 Dimensional Mode (Sector Editing Mode):
-------------------------------------------------

Shadow Warrior's BUILD is comprised of two basic editing modes: 2 dimensional
and 3 dimensional.  These modes are also sometimes referred to as sector
editing mode, and game view mode.

2d mode is one half of the total editor.  It is necessary to use 2d mode in
the construction of any map as it is 2d mode that is used to draw and modify
physical sectors. The screen in 2d mode displays the edit area (looks like a
grid), the command line (where menu's appear and where you'd type input when
needed, just to the right of the message: BUILD, By Ken Silverman), the
information area (displays pertinent information about selected objects),
and the statistics bar (includes cursor position and angle, and resource
information like used and total available sectors, walls and sprites). The
edit area is where most of your work in 2d mode is done.  On the 2d mode
edit area you will see the following:

7.1      Grid: This is the graph-like series of lines that overlay the edit
area. The intersection points of these lines are the points on the grid that
the cursor will lock to when placing or moving objects like sprites and
vertices.

7.2     Mouse Cursor: This is indicated by a red or white cross in the edit
area and can be moved with the mouse.

7.3     Player Position: This is from where your view would be in 3d mode. It
appears as a white arrow which points in the direction the view will face in
3d mode.

7.4     Vertices: These are the endpoints of lines and the corners of
sectors. They are represented by small green boxes.

7.5     Lines/walls: Lines define walls and divisions between sectors. A
white line is a one sided wall that has valid player space on only one side,
while a red line is a two sided wall that has valid player space on both
sides.

7.6     Sectors: An area enclosed by white or red lines (or a combination of
both) is a sector.  A sector can be made up of any number of lines/walls and
can take on any geometric shape.

7.7     Sprites: Sprites are objects in the game. They are represented by
colored dots with a long tail. The tail points in the direction the Sprite is
facing (default: north).

7.8     Signs: Signs appear within sectors, along lines/walls, and over
sprites whenever those objects have been tagged with a palette, HiTag or
LoTag greater than zero.

7.9     Colors: There are color codes that are useful in determining the type
of effect that has been placed on the objects found in 2d mode.  These color
codes vary depending on the object. Generally, a pink object (wall or sprite)
is a solid (impassable, blockable) object, and a double thickness pink/blue
line is also attributed as having "HitScan." A red cursor appears when grid
locking is on, and a white one appears when grid locking is off.  A white
line is a one sided wall, while red lines have two sides.  Note: While a line
is pink, it will not also indicate visually in red as being a two sided wall
as it is assumed that only two sided walls can be made to be blockable.


-----------------------------------------------------------
8.      Editing in 2 Dimensional Mode (Sector Editing Mode)
-----------------------------------------------------------

Below are all the functional keys for 2 Dimensional Mode in Shadow Warrior's
BUILD.


8.1     Control in 2D Mode

        8.1.1   Mouse: Movement of the mouse will position the cursor in the
        edit area window.

        Left button Click: Used to select an object.

        Left button Click and drag: Used to manipulate a vertex or sprite.
        Dragging the mouse with the left click held will move the nearest
        object with the mouse cursor.

        Right button Click: Used to place the Player Position Cursor.

        Right button Click and drag: Used to move the Player Position Cursor
        as you move the mouse.

        8.1.2   Keyboard Control: The following keys will also move the
        Player Cursor.

        Arrow Keys: Used to rotate and move the Player Position Cursor (white
        arrow).

        Left Alt: Used with arrow keys to strafe the Player Position Cursor
        left or right. [Note: The default key in BSETUP for strafing is
        Right-CTRL]

        Left Shift: Used to increase the movement speed of the Player
        Position Cursor. Hold left-shift while using the arrow keys for
        movement faster movement.

        A: Used to zoom in on the map (higher detail, less view area).

        Z: Used to zoom out on the map (lower detail, more view area).


8.2     Keyboard Commands for 2D Mode

Most commands are initiated with the keyboard. The following is a list of
commands available in 2d mode. Note: a command that starts with "Num" is
only activated with the numeric keypad.

        8.2.1   Esc Menu 

        Esc: Gives you the file menu with the following commands: New, Load, 
        Save, Save as, and Quit.

                (N)ew: Starts a new map (asks for confirmation).

                (L)oad: Loads a map from the list of all maps found in edit
                directory. Loading a new map will not give you an automatic
                opportunity to save current work as in most applications.

                (S)ave: Saves whatever map you're working on as its current
                title. Un-named maps will be saved as "NEWBOARD.MAP".

                Save (A)s: Allows you to choose a file name for the map you
                are working on and saves it as that filename. Note: Do not
                include the .map filename extension with your file name
                input.  The .map extension is automatically appended to the
                filename when you hit Enter.  Also, using this feature to
                save a map that already exists with that name will
                automatically overwrite the file without a warning.

                (Q)uit: Will allow you to escape to the operating system. An
                option of saving your work is given after you confirm your
                desire to exit BUILD.


        8.2.2   Basic 2D Editing Commands

        NumEnter: Toggles mode from 2d to 3d.

        Scroll Lock: Used to set the starting position for the Shadow Warrior
        in game mode. A brown arrow (similar to player position cursor) is
        left wherever the player position cursor was placed.

        G: Used to cycle through the various grid resolutions.  There are six 
        different settings from no grid to 16x. The default size is 4x and
        each size is exponential (twice the next size in area).

        L: Used to toggle "grid locking". When grid locking is on the mouse 
        cursor is red and all objects will snap to grid points. When grid
        locking is off the mouse cursor is white and all objects will float
        free (true placement).

        B: Sets "Blocking" on walls and sprites under the mouse cursor.
        The object will now appear pink.

        Shift B: Sets one-way blocking on walls.  Will only block the wall
        from one direction (side on which the blocking bit was set).

        Ctrl H: Sets "Hitscan" on wall and sprites under the mouse cursor.
        The object will glow, and lines will be double thickness.

        Tab: Use this key to display the attributes of a sector. Attributes 
        appear in the information window.

        Alt-Tab: Used to see the attributes of sprites and walls. NOTE: By
        default this is a Windows 95 system key. If you are running BUILD in
        a Windows 95 MS-DOS box, Alt-Tab will return you to the desktop. To
        avoid this, uncheck the Alt-Tab option in your MS-DOS box properties.

        Enter: Displays "Highlighted line pointers checked" Will check
        pointers under cursor.

        Lt Shift Lt Ctrl Enter: Checks and Fixes all pointers in map. Usually
        fixes mis-referenced lines and sectors. In very large maps you will
        find yourself needing to do this now and then.


        8.2.3   Line and Sector Drawing Commands in 2D Mode

        Space: Used to place vertices when drawing sectors. The space bar
        will always create a new vertex unless the mouse is directly over an
        existing vertex when it is pressed.  There are other conditions that
        will prevent a newly placed vertex from sharing or linking with an
        existing vertex including but not limited to non-grid locking mode,
        and trying to build a sector in sector that meets the outer sector
        at only one (starting) vertex.

        Backspace: Use the backspace when drawing new sectors (spacebar) to
        remove the last vertex you placed.  You can use multiple backspace
        keypresses to completely undo the sector creation.

        Insert: Inserts a new point along an already existing line when the
        mouse cursor has highlighted the line. Also can be used to copy or
        duplicate a group of sectors that have been selected with the "Right
        Alt" key. Also can be used to copy or duplicate a group of sprites
        that have been selected with the "Right Shift" key.

        Rt Ctrl Delete: Used to delete sectors. Recommend saving map before
        attempting sector deletes. Can also be used to delete an entire group
        of sectors selected with the "Right Alt" key.

        J: Used to join two sectors. Press J once over first sector and a 
        second time over the second sector you wish to join. Note: This
        function is the best (cleanest) way to delete "red" sectors when you
        wish to keep the sector area as valid player space. If you
        accidentally hit J once, and want to cancel the join operation,
        change to 3D editing mode and back again hitting the NumEnter key.

        Alt S: Used inside a white walled sector to create valid player space
        on both. sides. This command will turn the walls of a newly placed
        sector in a sector with red lines.

        C: Change a line into a circle. After first press move the mouse to
        choose the size of the circle, use -/+ to change the number of
        vertices around the circle. Press "C" again to cancel the selection
        or use spacebar to change the map by adding the indicated curved
        line.

        Alt F: Use Alt-F to set the "first wall" of a sector. The
        "first wall" is used in determining the pivot point (hinge) for
        angled floors and ceilings in 3D Mode. Also, the floor and ceiling
        textures align themselves from the "first wall" if "relative
        alignment" mode is on (press R on floor/ceiling in 3D Mode).

        T: Use inside of a sector to add a "LoTag" (Tag 2) to that sector.
        You will then input your LoTag value in the "Command Line" window
        (center of screen).  Use this command again if you wish to change
        your LoTag value.

        Alt T: Use to add a "LoTag" (Tag 2) to a wall. Use the mouse to
        highlight the wall you desire to change the "LoTag" for. When
        highlighting walls, make sure a sprite isn't also highlighted to
        adjust wall tag. Move cursor to one end of wall. Also note: Walls
        can be tagged on each side of line.

        H: Used inside of a sector to add a "HiTag" (Tag 1) to that sector.

        Alt H: Used to affect "HiTag" (Tag 1) for walls.


        8.2.4   Sprite Editing Commands in 2D Mode.

        S: Creates a sprite at the mouse cursor position.

        Delete: Used to delete sprites.

        < and >: Changes the angle of a sprite. Use the mouse cursor to
        highlight the sprite first.

        Shift < or >: Changes the angles of sprites in smaller increments.

        Alt T: Use to add a "LoTag" to a sprite. Use the mouse to highlight
        the sprite you desire to change the "LoTag" of.

        Alt H: Used to affect "HiTag" for sprites.

        ' 1 - 0: Will allow you to adjust the 1-10 tag number for the
        highlighted sprite. NOTE: Tag 4 is also the sprites angle.

        Shift ' 1 - 5: Allows you to adjust the 11-15 tag number for the
        highlighted sprite.

        ; 1 - 0: Used to adjust the boolean tag 1-10 for the
        highlighted sprite.

        Shift ; 1: Used to adjust the boolean tag 11 for the highlighted
        sprite.

        ' V: Toggles verbose sign information attached to tagged sprites.
        There are several different levels of verbosity.

        ' K: Toggles through the 4 skill levels for actors.


        8.2.5   Group Selection Commands in 2D Mode

        Right Shift: Hold this key as you drag the mouse (left click and
        hold) to select a group of vertices and sprites for movement. Selected
        objects will blink.  You may then move all of the selected objects as
        one by clicking and dragging any of the highlighted objects.

        Insert: Will paste copies of any sprites selected with Right Shift.

        Right Alt: Another group selection tool that can be used for
        duplicating sectors, or moving them around. Used exactly like "Right
        Shift". When objects are selected in this way the selected objects
        are indicated with sectors filled in with green flashing lines. Left
        click and dragging the mouse over a group of Right Alt selected
        sectors will allow you to move the sectors by moving the mouse.
        Note: Right Alt selected sectors will remain in their place in the
        map area if new maps are created or loaded from the Esc Menu. By this
        method sectors and sprites can be copied from one map to another.

        Rt Ctrl Delete: Deletes all sectors selected with Right Alt.

        Rt Ctrl Insert: Copies all sectors (and sprites) selected with the
        Right Alt function. Holding the Left Mouse Button over the Group
        Selected sectors before they are copied will allow you to move the
        newly created sectors anywhere in the map area.

        < and >: Rotates all sectors selected with Right Alt.

        Lt Shift < and >: Rotates all sectors selected with Right Alt in
        tiny increments.


        8.2.6 Advanced 2D Mode Editor Functions
               
        ' M: Provides menu: 1) Plax Set, 2) Plax Adjust, 3) Shade Adjust, 
        4) Visibility. Used for adjusting global settings for parallax
        floors/ceilings.

        F5: Displays next available tag and sprite information. Useful when 
        populating. Some of the items tallied are no longer meaningful.

        F6: Context sensitive help. Displays information about object under 
        cursor. If cursor is over an ST1 Sprite, specialized help menus
        describe special effect functions. This help will usually be the same
        documentation found in ST1.TXT. Sometimes particular tag will have
        multiple pages of help, in which case you will be prompted to press
        a key to see the next page, or the Q key to cancel context sensitive
        help.

        F7: Used to scroll through F8 search results.
    
        F8: Brings up menu for use with sprites: 
        1) Skill level: Sets minimum skill level in which an actor will
           appear (0-3).
        2) Multiplayer item: Sets a switch, crack, lock, or item to only
           appear in WangBang.
        3) Find Sprite: Activates sprite search function. (See below)
        4) Debug: Programmer's use only.

        If option 3 is selected the following menu appears. Select the
        criteria by which to search.
        1) PicNum: Searches for matching Sprites by tile number when set to
           "True."
        2) HiTag: Searches for matching HiTag numbers when set to "True."
        3) LoTag: Searches for matching LoTag numbers when set to "True."
        At least one of the above options must be set to "True" to
        activate search. Once the search is initiated, hit F7 to cycle
        through each sprite that matches the search criteria.


----------------------------------------------------
9.      3 Dimensional mode (game view editing mode):
----------------------------------------------------

3D Mode gives you a view of the world you're editing as if you were actually
playing the game. This mode differs from the game, however, in that there is
no status bar, and you cannot interact with the world in game terms. You can
interact with the world in editing terms, however, as it is in this mode that
you will shape your world vertically. It is also in this mode that you will
select art and light levels for structure surfaces (sectors and walls) and
sprites (objects, monsters, etc).

In this view you'll find (in addition to whatever is in your world) a couple
of important things. The first is your editing cursor. It appears as a white
cross and is moved with the mouse. Also, in the upper left hand corner,
you'll see a number counter. This is the frame rate counter which constantly
updates the number of frames per second(fps) you're getting as you move
through your world in 3D Mode. FPS represent how many times per second the
screen is redrawn.

9.1     Cursor: This white cross floats about your screen as you move the 
mouse and will serve as the main pointer to select surfaces and sprites to
affect in this mode. To choose an object or surface to modify, you may simply
move the mouse cursor over that object or surface and perform the function
you wish to apply.

9.2     Frame Rate Counter: This displays the current "frames per second."
The more complex the area within your view, the lower the frame rate will
become.  Frame rate is very important to game play, so try to keep your frame
rate as high as possible when editing.

9.3     Floors/Ceilings: The top and bottom surfaces in 3D Mode are called
ceilings and floors, they carry a texture (tile), shade, and control
visibility for their sector. Floors and Ceilings are the 3D Equivalent of
sector areas.

9.4     Walls: Wall surfaces are the 3D Mode equivalent of lines. They 
carry texture (tile) and shade information and may be tagged for special
functions.

9.5     Sprites: Objects in 3D Mode are sprites. They can be rotated flat 
against walls or floors and ceilings, or they may remain as "rotating"
sprites. Sprites also will carry tag information for special events. Sprites
carry art (tile), shade and size information.


-----------------------------------------------------
10.      3 Dimensional mode (game view editing mode):
-----------------------------------------------------

Below are all the functional keys for 3D Mode in Shadow Warrior's BUILD.

10.1     Control in 3D Mode

        10.1.1   Mouse
        Movement of the mouse will position the cursor within the 3D view.

        Lft Click/Drag: Will "hold" the selection even if the mouse is moved
        from the surface or object.  An object or surface that has been
        "held" may be edited with almost any of the functions in 3D Mode even
        if the object or surface is no longer under the cursor.

        10.1.2   Keyboard Controls
        The following keys will affect the player view and move the "camera"
        through the world in 3D Mode.
        
        Arrow Keys: Will move the view forward and back, and rotate left and
        right.

        Left Alt: Used with arrow keys to strafe the view left or right.
        NOTE: The default key in BSETUP for strafing is Right-CTRL.

        Left Shift: Used to increase the movement speed of the view. Hold
        left shift while using the arrow keys for movement faster movement.

        A: Used to adjust the vertical position of the camera upwards
        according to what view mode is currently active (See: Caps Lock,
        below).

        Z: Used to adjust the vertical position of the camera upwards
        according to what view mode is currently active (See: Caps Lock,
        below).

        Caps Lock: Changes vertical view mode. Setting are: Normal (A and Z
        will cause view to "jump" and "crouch"), Floating (A and Z will
        smoothly float view up or down), and Incremental (A and Z will
        adjust view by increments up or down).

        Lft Ctrl A: Will tilt the view upwards, as in looking up without
        changing vertical position.

        Lft Ctrl Z: Tilts the view down, as if you were looking down
        without changing vertical position.


10.2    Keyboard Commands for 3D Mode

Most commands are initiated with the keyboard. The following is a list of
commands available in 3D Mode. Note: a command that starts with "Num" is only
activated with the numeric keypad.

        10.2.1 Basic 3D Mode Editing Functions

        NumEnter: Toggles back into 2D Mode.

        Page Up: Moves the selected object or surface (floor or ceiling only)
        up one unit.

        Page Down: Moves the selected object or surface (floor/ceiling only)
        down one unit.

        [ and ]: Slopes the selected floor or ceiling surface along the
        "first wall." (see above)

        Lt Shift [ and ]: Slopes selected floors and ceilings in smaller
        increments.

        Lt Alt [ and ]: Aligns a sloped surface exactly to the height of the
        next surface in the direction the camera is facing.

        /: Resets default settings. If the cursor is pointing to a floor or
        ceiling, it flattens slope, and resets the pan of texture. If the
        cursor is pointing to a wall, it resets the pan and stretch of the
        wall texture. If the cursor is pointing to a sprite, it resets the
        stretching of the sprite.

        V: Texture/art selection. The first press will bring up a tile menu
        showing all textures currently within map on like surfaces to what
        the cursor was pointing to. In other words, if you press V while the
        cursor is pointing at a wall, you will see a list of all the other
        wall textures used in the map. V can be used to select textures for
        four different surface types: walls, floor/ceilings, sprites, and
        masked walls. The number under each tile is the number of times it
        appears in your map on that type of surface. Pressing V again while
        in this menu will bring up a texture/art tile menu showing every
        available piece of art.

        G: (Tile Mode) Pressing "G" while in the tile view menu will allow
        you to input a "goto" number. This will jump the cursor to a selected
        tile number in the art file.

        B: Sets the blocking bit to the object/surface under the cursor. If
        set to a red line, the player will not be permitted to cross that
        line.

        Shift B: Sets a one way blocking wall.

        H: Sets the hitscan bit to the object/surface under the cursor.

        M: Creates a masking wall across the selected sector line.

        Shift M: Creates a one way masking wall across the selected sector
        line.

        T: Sets the masking wall or sprite to a translucency level. Toggles
        from normal to slightly translucent to very translucent and back to
        normal again.

        1: Creates a one way wall over the selected sector line. Non-blocking
        one way walls may still be passed through.

        2: Separates the texture information for above and below walls.
        Allows mapper to define different textures for walls above and
        below nearby floor and ceiling heights.


        10.2.2   Texture Editing in 3D Mode

        Shift 2,4,6,8(num): Used to pan a texture across a selected surface.

        F: Flips texture or sprite (8 possible rotations for floors/ceilings, 
        4 for walls and sprites).

        /: Resets texture to default settings (slope, pan and repeat values).

        V: Initiates Tile Menu Mode (described above).


        10.4.2.1 Floors and Ceilings

        E: Expands or Unexpands the size of size of floor and ceiling 
        tiles.

        R: Sets relative alignment on or off.

        Alt-F: Rotates the "first wall" in 3D Mode for relative alignment
        and sloping purposes. The wall the view is pointing at (not the
        cursor) will become the first wall for that sector.

        P: Sets parallax sky.

        10.4.2.2 Walls

        2,4,6,8 (num): Adjusts repeat values for wall textures. Effect is of
        changing the apparent size of each pixel in the art, or "stretching"
        the texture.

        5(num): Holding this key while using the repeat value adjust keys
        will align adjustments in multiples of 8 pixels.

        O: Sets the orientation of the wall texture. Walls are oriented 
        from either the floor line or the ceiling line.

        . or >: Will attempt to automatically align all like tiles to the
        right of the selected tile. 


        10.2.3   Sprite Editing in 3D Mode

        2,4,6,8 (num): Adjusts size of sprites. 

        5 (num): Holding this key will lock sprite size adjustments to
        multiples of 4 pixels.

        Ctrl Page Up: Instantly moves sprite against ceiling.

        Ctrl Page Down: Instantly moves sprite against floor

        ' X: Toggles Voxels (3D sprites) on or off.

        ' Z: Toggles Voxel rotation on or off.

        ' M: Toggles Sprites visible or invisible. Toggles through three
        modes: All Sprites Visible, Actors and ST1s Invisible, and No Sprites
        Visible.

        R: Rotates sprite. Toggles through three modes: Normal, Flat
        Vertical, and Flat Horizontal.

        O: Pushes a vertically rotated sprite against nearest wall behind it.
        Sprite will move in the opposite direction it is pointing until it
        runs into a wall. The sprite will slightly reorient itself to an
        angle perpendicular to the wall.

        < and >: Changes the angle a sprite is facing.

        Shift < and >: Changes the angle of the sprite in tiny increments.

        T: Toggles translucency levels of sprite.

        ' A: Toggles Sprite Autosizing on and off.


        10.2.4   Shade, Visibility, and Palette Editing in 3D Mode

        +/- (num): Adjusts shade of selected surface or object by one.

        ' S: Allows numerical input of shade value on selected object or 
        surface. Range is -128 to 128.

        ' + or ' -(num): Shades floor or ceiling but offsets sprites in
        sector to balance.

        Alt +/- (num): Adjusts visibility of sector by 16 units.

        ' V: Allows numerical input of visibility value on selected sector.

        ' P: Used to select palette number for selected surface/object.
            
    Shadow Warrior Palette Number Reference:
        0  Default (no palette adjustment)
        1  Fog (White) Haze
        4  Dark Gray
        5  Heat (Red) Haze
        7  Gray Swap - Brown
        9  Water (Blue) Haze 
        11 Green
        13 Blue
        14 Red
        16 Blue Swap - Tan
        17 Blue Swap - Gray
        18 Blue Swap - Purple
        19 Blue Swap - Cool Red
        20 Blue Swap - Yellow
        21 Blue Swap - Olive
        22 Blue Swap - Green    
        24 Blue Swap - Orange/Brown
        25 Blue Swap - Warm Red
        26 Blue Swap - Dark Gray
        27 Blue Swap - Avocado
        28 Blue Swap - Deep Blue
        29 Blue Swap - Bright Orange
        32 Night Vision


        10.2.5   Copy, Paste and Group Editing Functions in 3D Mode
        
        Tab: Will copy the tile information (to memory) below the cursor.  
        This includes tags, palette, shade, visibility, tile number, pan,
        alignment, parallax, repeat and just about every other conceivable
        setting a surface or sprite can have. Use of the "copied"
        information is detailed in the commands below.

        Enter: Pastes "Tab Selected" information to current surface or
        sprite.

        Alt C: Pastes "Tab Selected" art to all similar (Sprite, wall, floor, 
        ceiling, etc.) surfaces that match surface cursor is over.

        Shift Enter: Copies "Tab Selected" shade, palette, and visibility
        information, but nothing else, to the surface currently under the
        cursor.

        The following functions are used with in 3D mode with sectors,
        sprites and areas selected with Right Alt in 2D Mode.

        +/-(num): Adjusts the shade of all selected areas by one.

        Alt +/-(num): Adjusts the visibility of all selected areas by 16.

        ' C: Copies a "Tab Selected" tile (art only) to all tiles within 
        selected group (Right Alt in 2D) that match currently selected          surface.        If no group is selected (Right Alt in 2D Mode), copy will be            global.

        ' P: Copies "Tab Selected" palette information to every surface 
        selected with Right Alt in 2D Mode.


        10.2.6   Tagging, and Advanced 3D Mode Functions
        
        ' T: Allows numerical setting of "LoTag" value (Tag 2) on walls,
        sectors or sprites.

        ' H: Allows numerical setting of "HiTag" value (Tag 1) on walls,
        sectors, or sprites.

        ' 1-0: Used to manually set tag numbers of walls, sectors, and 
        sprites from within 3D Mode.  Works for tags 1-10. Walls only use
        tags 1-4, and sectors only use tags 1-6. You will probably never need
        to use any tags for walls or sectors besides hi- and lo- tags.

        Shift ' 1-5: Used to manually set higher tag numbers 11-15 on
        sprites.

        ; 1-0: Allows you to enter Boolean 1-10 tag values for sprites.
            
        Shift ; 1: Allows you to enter a Boolean tag 11 value for sprites.

        F11: Adjusts gamma correction brighter by one unit. There are 16 
        settings for gamma correction level. After the brightest level,
        gamma is reset to lowest (default) level with one more key press
        of F11.

        3: Toggles Room over Room draw on and off. NOTE: Click and hold for
        3D Mode editing is disabled while this function is toggled on.
        WARNING: It is generally a bad idea to go into 2D mode
        and create sectors while Room over Room draw is turned on. Also, when
        you return to 3D edit mode, click and hold will still be disabled,
        even though Room over Room draw is turned off. Turn Room over Room
        draw on and off again to return to normal.

        4: Moves view position through Room over Room mirror divider 
        when Room over Room is toggled on, and view is within a Room over
        Room sector.


----------------------------------------------
11.      Shadow Warrior Map Authoring Template
----------------------------------------------

When you upload your .MAP file(s) to FTP sites, BBS's and the like, you
are encouraged to include this file with the map, so that you can be
recognized for your work!  We can't wait to see what you can come up with!

Shadow Warrior .MAP Authoring Template v1.0
================================================================
Title                   :
Filename                : xxxx.MAP
Author                  : Your name here
Email Address           :
Misc. Author Info       :

Description             :

Additional Credits to   :
================================================================

* Play Information *

Episode and Level #     :
Single Player           : Yes/No
WangBang Level          : Yes/No
Difficulty Settings     : Yes/Not implemented

* Construction *

Base                    : New level from scratch/Modified Level #/xxx.MAP
Editor(s) used          :
Known Bugs              :

* Where to get this MAP file *

FTP sites:

BBS numbers:

Other:                